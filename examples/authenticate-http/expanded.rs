#![feature(prelude_import)]
//! An example authenticate hook that parses an API key from the request query string
//! and makes a request to an API to verify the key
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use http::request::Builder;
use kiwi_sdk::hook::authenticate::{authenticate, Outcome};
use kiwi_sdk::http::{request as http_request, Request};
/// You must use the `#[intercept]` macro to define an intercept hook.
fn handle(req: Request<()>) -> Outcome {
    let query = match req.uri().query() {
        Some(query) => query,
        None => return Outcome::Reject,
    };
    let parts: Vec<&str> = query.split('&').collect();
    let key = {
        let mut token = None;
        for (key, value) in parts
            .iter()
            .map(|part| {
                let mut parts = part.split('=');
                (parts.next().unwrap(), parts.next().unwrap())
            })
        {
            if key == "x-api-key" {
                token = Some(value);
                break;
            }
        }
        if let Some(token) = token {
            token
        } else {
            return Outcome::Reject;
        }
    };
    let request = Builder::new()
        .method("GET")
        .uri("https://example.com")
        .header("x-api-key", key)
        .body(Vec::new())
        .unwrap();
    match http_request(request) {
        Ok(res) => {
            if res.status() == 200 { Outcome::Authenticate } else { Outcome::Reject }
        }
        Err(_) => Outcome::Reject,
    }
}
mod __kiwi_authenticate {
    mod bindings {
        #![allow(missing_docs)]
        use ::kiwi_sdk::wit::wasi::io::poll as __with_name0;
        use ::kiwi_sdk::wit::wasi::clocks::monotonic_clock as __with_name1;
        use ::kiwi_sdk::wit::wasi::io::error as __with_name2;
        use ::kiwi_sdk::wit::wasi::io::streams as __with_name3;
        use ::kiwi_sdk::wit::wasi::http::types as __with_name4;
        use ::kiwi_sdk::wit::wasi::http::outgoing_handler as __with_name5;
        pub type Outcome = kiwi::kiwi::authenticate_types::Outcome;
        pub type HttpRequest = kiwi::kiwi::authenticate_types::HttpRequest;
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_authenticate_cabi<T: Guest>(
            arg0: i32,
            arg1: *mut u8,
            arg2: usize,
            arg3: i32,
            arg4: *mut u8,
            arg5: usize,
            arg6: i32,
            arg7: i32,
            arg8: *mut u8,
            arg9: usize,
            arg10: i32,
            arg11: *mut u8,
            arg12: usize,
            arg13: *mut u8,
            arg14: usize,
        ) -> *mut u8 {
            use __with_name4::Method as V1;
            let v1 = match arg0 {
                0 => V1::Get,
                1 => V1::Head,
                2 => V1::Post,
                3 => V1::Put,
                4 => V1::Delete,
                5 => V1::Connect,
                6 => V1::Options,
                7 => V1::Trace,
                8 => V1::Patch,
                n => {
                    if true {
                        match (&n, &9) {
                            (left_val, right_val) => {
                                if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(
                                        kind,
                                        &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(
                                            format_args!("invalid enum discriminant"),
                                        ),
                                    );
                                }
                            }
                        };
                    }
                    let e1 = {
                        let len0 = arg2;
                        let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                        _rt::string_lift(bytes0)
                    };
                    V1::Other(e1)
                }
            };
            let base12 = arg13;
            let len12 = arg14;
            let mut result12 = _rt::Vec::with_capacity(len12);
            for i in 0..len12 {
                let base = base12.add(i * 16);
                let e12 = {
                    let l6 = *base.add(0).cast::<*mut u8>();
                    let l7 = *base.add(4).cast::<usize>();
                    let len8 = l7;
                    let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);
                    let l9 = *base.add(8).cast::<*mut u8>();
                    let l10 = *base.add(12).cast::<usize>();
                    let len11 = l10;
                    (
                        _rt::string_lift(bytes8),
                        _rt::Vec::from_raw_parts(l9.cast(), len11, len11),
                    )
                };
                result12.push(e12);
            }
            _rt::cabi_dealloc(base12, len12 * 16, 4);
            let result13 = T::authenticate(kiwi::kiwi::authenticate_types::HttpRequest {
                method: v1,
                path_with_query: match arg3 {
                    0 => None,
                    1 => {
                        let e = {
                            let len2 = arg5;
                            let bytes2 = _rt::Vec::from_raw_parts(
                                arg4.cast(),
                                len2,
                                len2,
                            );
                            _rt::string_lift(bytes2)
                        };
                        Some(e)
                    }
                    _ => _rt::invalid_enum_discriminant(),
                },
                scheme: match arg6 {
                    0 => None,
                    1 => {
                        let e = {
                            use __with_name4::Scheme as V4;
                            let v4 = match arg7 {
                                0 => V4::Http,
                                1 => V4::Https,
                                n => {
                                    if true {
                                        match (&n, &2) {
                                            (left_val, right_val) => {
                                                if !(*left_val == *right_val) {
                                                    let kind = ::core::panicking::AssertKind::Eq;
                                                    ::core::panicking::assert_failed(
                                                        kind,
                                                        &*left_val,
                                                        &*right_val,
                                                        ::core::option::Option::Some(
                                                            format_args!("invalid enum discriminant"),
                                                        ),
                                                    );
                                                }
                                            }
                                        };
                                    }
                                    let e4 = {
                                        let len3 = arg9;
                                        let bytes3 = _rt::Vec::from_raw_parts(
                                            arg8.cast(),
                                            len3,
                                            len3,
                                        );
                                        _rt::string_lift(bytes3)
                                    };
                                    V4::Other(e4)
                                }
                            };
                            v4
                        };
                        Some(e)
                    }
                    _ => _rt::invalid_enum_discriminant(),
                },
                authority: match arg10 {
                    0 => None,
                    1 => {
                        let e = {
                            let len5 = arg12;
                            let bytes5 = _rt::Vec::from_raw_parts(
                                arg11.cast(),
                                len5,
                                len5,
                            );
                            _rt::string_lift(bytes5)
                        };
                        Some(e)
                    }
                    _ => _rt::invalid_enum_discriminant(),
                },
                headers: result12,
            });
            let ptr14 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
            use kiwi::kiwi::authenticate_types::Outcome as V16;
            match result13 {
                V16::Authenticate => {
                    *ptr14.add(0).cast::<u8>() = (0i32) as u8;
                }
                V16::Reject => {
                    *ptr14.add(0).cast::<u8>() = (1i32) as u8;
                }
                V16::WithContext(e) => {
                    *ptr14.add(0).cast::<u8>() = (2i32) as u8;
                    let vec15 = (e).into_boxed_slice();
                    let ptr15 = vec15.as_ptr().cast::<u8>();
                    let len15 = vec15.len();
                    ::core::mem::forget(vec15);
                    *ptr14.add(8).cast::<usize>() = len15;
                    *ptr14.add(4).cast::<*mut u8>() = ptr15.cast_mut();
                }
            }
            ptr14
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn __post_return_authenticate<T: Guest>(arg0: *mut u8) {
            let l0 = i32::from(*arg0.add(0).cast::<u8>());
            match l0 {
                0 => {}
                1 => {}
                _ => {
                    let l1 = *arg0.add(4).cast::<*mut u8>();
                    let l2 = *arg0.add(8).cast::<usize>();
                    let base3 = l1;
                    let len3 = l2;
                    _rt::cabi_dealloc(base3, len3 * 1, 1);
                }
            }
        }
        pub trait Guest {
            fn authenticate(incoming: HttpRequest) -> Outcome;
        }
        #[doc(hidden)]
        pub(crate) use __export_world_authenticate_hook_cabi;
        #[repr(align(4))]
        struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
        static mut _RET_AREA: _RetArea = _RetArea(
            [::core::mem::MaybeUninit::uninit(); 12],
        );
        pub mod kiwi {
            pub mod kiwi {
                #[allow(clippy::all)]
                pub mod authenticate_types {
                    use super::super::super::_rt;
                    pub type Method = super::super::super::__with_name4::Method;
                    pub type Scheme = super::super::super::__with_name4::Scheme;
                    pub type FieldKey = super::super::super::__with_name4::FieldKey;
                    pub type FieldValue = super::super::super::__with_name4::FieldValue;
                    pub enum Outcome {
                        Authenticate,
                        Reject,
                        WithContext(_rt::Vec<u8>),
                    }
                    #[automatically_derived]
                    impl ::core::clone::Clone for Outcome {
                        #[inline]
                        fn clone(&self) -> Outcome {
                            match self {
                                Outcome::Authenticate => Outcome::Authenticate,
                                Outcome::Reject => Outcome::Reject,
                                Outcome::WithContext(__self_0) => {
                                    Outcome::WithContext(::core::clone::Clone::clone(__self_0))
                                }
                            }
                        }
                    }
                    impl ::core::fmt::Debug for Outcome {
                        fn fmt(
                            &self,
                            f: &mut ::core::fmt::Formatter<'_>,
                        ) -> ::core::fmt::Result {
                            match self {
                                Outcome::Authenticate => {
                                    f.debug_tuple("Outcome::Authenticate").finish()
                                }
                                Outcome::Reject => f.debug_tuple("Outcome::Reject").finish(),
                                Outcome::WithContext(e) => {
                                    f.debug_tuple("Outcome::WithContext").field(e).finish()
                                }
                            }
                        }
                    }
                    /// This is the object form of the resource `wasi:http/types@0.2.0.{incoming-request}`.
                    /// Curently, it's duplicated due to the lack of support for including re-mapped types
                    /// in exported functions arguments, via `--with`. The issue is tracked
                    /// [here](https://github.com/bytecodealliance/wit-bindgen/issues/832).
                    ///
                    /// Until the issue is resolved, we have to duplicate the type here, and massage it to be
                    /// compatible with the `Request` type in the kiwi-sdk.
                    ///
                    /// NOTE: Resolving this workaround will likely require a new major version of the SDK to be
                    /// released, as it will be a breaking change unless we can guarantee API compatibility between
                    /// the two types.
                    pub struct HttpRequest {
                        /// Returns the method of the incoming request.
                        pub method: Method,
                        /// Returns the path with query parameters from the request, as a string.
                        pub path_with_query: Option<_rt::String>,
                        /// Returns the protocol scheme from the request.
                        pub scheme: Option<Scheme>,
                        /// Returns the authority from the request, if it was present.
                        pub authority: Option<_rt::String>,
                        /// Get the `headers` associated with the request.
                        pub headers: _rt::Vec<(FieldKey, FieldValue)>,
                    }
                    #[automatically_derived]
                    impl ::core::clone::Clone for HttpRequest {
                        #[inline]
                        fn clone(&self) -> HttpRequest {
                            HttpRequest {
                                method: ::core::clone::Clone::clone(&self.method),
                                path_with_query: ::core::clone::Clone::clone(
                                    &self.path_with_query,
                                ),
                                scheme: ::core::clone::Clone::clone(&self.scheme),
                                authority: ::core::clone::Clone::clone(&self.authority),
                                headers: ::core::clone::Clone::clone(&self.headers),
                            }
                        }
                    }
                    impl ::core::fmt::Debug for HttpRequest {
                        fn fmt(
                            &self,
                            f: &mut ::core::fmt::Formatter<'_>,
                        ) -> ::core::fmt::Result {
                            f.debug_struct("HttpRequest")
                                .field("method", &self.method)
                                .field("path-with-query", &self.path_with_query)
                                .field("scheme", &self.scheme)
                                .field("authority", &self.authority)
                                .field("headers", &self.headers)
                                .finish()
                        }
                    }
                }
            }
        }
        mod _rt {
            pub use alloc_crate::vec::Vec;
            pub use alloc_crate::string::String;
            pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
                if true {
                    String::from_utf8(bytes).unwrap()
                } else {
                    String::from_utf8_unchecked(bytes)
                }
            }
            pub unsafe fn invalid_enum_discriminant<T>() -> T {
                if true {
                    {
                        ::core::panicking::panic_fmt(
                            format_args!("invalid enum discriminant"),
                        );
                    }
                } else {
                    core::hint::unreachable_unchecked()
                }
            }
            pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
                if size == 0 {
                    return;
                }
                let layout = alloc::Layout::from_size_align_unchecked(size, align);
                alloc::dealloc(ptr as *mut u8, layout);
            }
            extern crate alloc as alloc_crate;
            pub use alloc_crate::alloc;
        }
        #[doc(inline)]
        pub(crate) use __export_authenticate_hook_impl as export;
        const _: &[u8] = b"package wasi:io@0.2.0;\n\n/// WASI I/O is an I/O abstraction API which is currently focused on providing\n/// stream types.\n///\n/// In the future, the component model is expected to add built-in stream types;\n/// when it does, they are expected to subsume this API.\ninterface streams {\n    use error.{error};\n    use poll.{pollable};\n\n    /// An error for input-stream and output-stream operations.\n    variant stream-error {\n        /// The last operation (a write or flush) failed before completion.\n        ///\n        /// More information is available in the `error` payload.\n        last-operation-failed(error),\n        /// The stream is closed: no more input will be accepted by the\n        /// stream. A closed output-stream will return this error on all\n        /// future operations.\n        closed\n    }\n\n    /// An input bytestream.\n    ///\n    /// `input-stream`s are *non-blocking* to the extent practical on underlying\n    /// platforms. I/O operations always return promptly; if fewer bytes are\n    /// promptly available than requested, they return the number of bytes promptly\n    /// available, which could even be zero. To wait for data to be available,\n    /// use the `subscribe` function to obtain a `pollable` which can be polled\n    /// for using `wasi:io/poll`.\n    resource input-stream {\n        /// Perform a non-blocking read from the stream.\n        ///\n        /// This function returns a list of bytes containing the read data,\n        /// when successful. The returned list will contain up to `len` bytes;\n        /// it may return fewer than requested, but not more. The list is\n        /// empty when no bytes are available for reading at this time. The\n        /// pollable given by `subscribe` will be ready when more bytes are\n        /// available.\n        ///\n        /// This function fails with a `stream-error` when the operation\n        /// encounters an error, giving `last-operation-failed`, or when the\n        /// stream is closed, giving `closed`.\n        ///\n        /// When the caller gives a `len` of 0, it represents a request to\n        /// read 0 bytes. If the stream is still open, this call should\n        /// succeed and return an empty list, or otherwise fail with `closed`.\n        ///\n        /// The `len` parameter is a `u64`, which could represent a list of u8 which\n        /// is not possible to allocate in wasm32, or not desirable to allocate as\n        /// as a return value by the callee. The callee may return a list of bytes\n        /// less than `len` in size while more bytes are available for reading.\n        read: func(\n            /// The maximum number of bytes to read\n            len: u64\n        ) -> result<list<u8>, stream-error>;\n\n        /// Read bytes from a stream, after blocking until at least one byte can\n        /// be read. Except for blocking, behavior is identical to `read`.\n        blocking-read: func(\n            /// The maximum number of bytes to read\n            len: u64\n        ) -> result<list<u8>, stream-error>;\n\n        /// Skip bytes from a stream. Returns number of bytes skipped.\n        ///\n        /// Behaves identical to `read`, except instead of returning a list\n        /// of bytes, returns the number of bytes consumed from the stream.\n        skip: func(\n            /// The maximum number of bytes to skip.\n            len: u64,\n        ) -> result<u64, stream-error>;\n\n        /// Skip bytes from a stream, after blocking until at least one byte\n        /// can be skipped. Except for blocking behavior, identical to `skip`.\n        blocking-skip: func(\n            /// The maximum number of bytes to skip.\n            len: u64,\n        ) -> result<u64, stream-error>;\n\n        /// Create a `pollable` which will resolve once either the specified stream\n        /// has bytes available to read or the other end of the stream has been\n        /// closed.\n        /// The created `pollable` is a child resource of the `input-stream`.\n        /// Implementations may trap if the `input-stream` is dropped before\n        /// all derived `pollable`s created with this function are dropped.\n        subscribe: func() -> pollable;\n    }\n\n\n    /// An output bytestream.\n    ///\n    /// `output-stream`s are *non-blocking* to the extent practical on\n    /// underlying platforms. Except where specified otherwise, I/O operations also\n    /// always return promptly, after the number of bytes that can be written\n    /// promptly, which could even be zero. To wait for the stream to be ready to\n    /// accept data, the `subscribe` function to obtain a `pollable` which can be\n    /// polled for using `wasi:io/poll`.\n    resource output-stream {\n        /// Check readiness for writing. This function never blocks.\n        ///\n        /// Returns the number of bytes permitted for the next call to `write`,\n        /// or an error. Calling `write` with more bytes than this function has\n        /// permitted will trap.\n        ///\n        /// When this function returns 0 bytes, the `subscribe` pollable will\n        /// become ready when this function will report at least 1 byte, or an\n        /// error.\n        check-write: func() -> result<u64, stream-error>;\n\n        /// Perform a write. This function never blocks.\n        ///\n        /// Precondition: check-write gave permit of Ok(n) and contents has a\n        /// length of less than or equal to n. Otherwise, this function will trap.\n        ///\n        /// returns Err(closed) without writing if the stream has closed since\n        /// the last call to check-write provided a permit.\n        write: func(\n            contents: list<u8>\n        ) -> result<_, stream-error>;\n\n        /// Perform a write of up to 4096 bytes, and then flush the stream. Block\n        /// until all of these operations are complete, or an error occurs.\n        ///\n        /// This is a convenience wrapper around the use of `check-write`,\n        /// `subscribe`, `write`, and `flush`, and is implemented with the\n        /// following pseudo-code:\n        ///\n        /// ```text\n        /// let pollable = this.subscribe();\n        /// while !contents.is_empty() {\n        ///     // Wait for the stream to become writable\n        ///     poll-one(pollable);\n        ///     let Ok(n) = this.check-write(); // eliding error handling\n        ///     let len = min(n, contents.len());\n        ///     let (chunk, rest) = contents.split_at(len);\n        ///     this.write(chunk  );            // eliding error handling\n        ///     contents = rest;\n        /// }\n        /// this.flush();\n        /// // Wait for completion of `flush`\n        /// poll-one(pollable);\n        /// // Check for any errors that arose during `flush`\n        /// let _ = this.check-write();         // eliding error handling\n        /// ```\n        blocking-write-and-flush: func(\n            contents: list<u8>\n        ) -> result<_, stream-error>;\n\n        /// Request to flush buffered output. This function never blocks.\n        ///\n        /// This tells the output-stream that the caller intends any buffered\n        /// output to be flushed. the output which is expected to be flushed\n        /// is all that has been passed to `write` prior to this call.\n        ///\n        /// Upon calling this function, the `output-stream` will not accept any\n        /// writes (`check-write` will return `ok(0)`) until the flush has\n        /// completed. The `subscribe` pollable will become ready when the\n        /// flush has completed and the stream can accept more writes.\n        flush: func() -> result<_, stream-error>;\n\n        /// Request to flush buffered output, and block until flush completes\n        /// and stream is ready for writing again.\n        blocking-flush: func() -> result<_, stream-error>;\n\n        /// Create a `pollable` which will resolve once the output-stream\n        /// is ready for more writing, or an error has occured. When this\n        /// pollable is ready, `check-write` will return `ok(n)` with n>0, or an\n        /// error.\n        ///\n        /// If the stream is closed, this pollable is always ready immediately.\n        ///\n        /// The created `pollable` is a child resource of the `output-stream`.\n        /// Implementations may trap if the `output-stream` is dropped before\n        /// all derived `pollable`s created with this function are dropped.\n        subscribe: func() -> pollable;\n\n        /// Write zeroes to a stream.\n        ///\n        /// this should be used precisely like `write` with the exact same\n        /// preconditions (must use check-write first), but instead of\n        /// passing a list of bytes, you simply pass the number of zero-bytes\n        /// that should be written.\n        write-zeroes: func(\n            /// The number of zero-bytes to write\n            len: u64\n        ) -> result<_, stream-error>;\n\n        /// Perform a write of up to 4096 zeroes, and then flush the stream.\n        /// Block until all of these operations are complete, or an error\n        /// occurs.\n        ///\n        /// This is a convenience wrapper around the use of `check-write`,\n        /// `subscribe`, `write-zeroes`, and `flush`, and is implemented with\n        /// the following pseudo-code:\n        ///\n        /// ```text\n        /// let pollable = this.subscribe();\n        /// while num_zeroes != 0 {\n        ///     // Wait for the stream to become writable\n        ///     poll-one(pollable);\n        ///     let Ok(n) = this.check-write(); // eliding error handling\n        ///     let len = min(n, num_zeroes);\n        ///     this.write-zeroes(len);         // eliding error handling\n        ///     num_zeroes -= len;\n        /// }\n        /// this.flush();\n        /// // Wait for completion of `flush`\n        /// poll-one(pollable);\n        /// // Check for any errors that arose during `flush`\n        /// let _ = this.check-write();         // eliding error handling\n        /// ```\n        blocking-write-zeroes-and-flush: func(\n            /// The number of zero-bytes to write\n            len: u64\n        ) -> result<_, stream-error>;\n\n        /// Read from one stream and write to another.\n        ///\n        /// The behavior of splice is equivelant to:\n        /// 1. calling `check-write` on the `output-stream`\n        /// 2. calling `read` on the `input-stream` with the smaller of the\n        /// `check-write` permitted length and the `len` provided to `splice`\n        /// 3. calling `write` on the `output-stream` with that read data.\n        ///\n        /// Any error reported by the call to `check-write`, `read`, or\n        /// `write` ends the splice and reports that error.\n        ///\n        /// This function returns the number of bytes transferred; it may be less\n        /// than `len`.\n        splice: func(\n            /// The stream to read from\n            src: borrow<input-stream>,\n            /// The number of bytes to splice\n            len: u64,\n        ) -> result<u64, stream-error>;\n\n        /// Read from one stream and write to another, with blocking.\n        ///\n        /// This is similar to `splice`, except that it blocks until the\n        /// `output-stream` is ready for writing, and the `input-stream`\n        /// is ready for reading, before performing the `splice`.\n        blocking-splice: func(\n            /// The stream to read from\n            src: borrow<input-stream>,\n            /// The number of bytes to splice\n            len: u64,\n        ) -> result<u64, stream-error>;\n    }\n}\n";
        const _: &[u8] = b"package wasi:io@0.2.0;\n\n\ninterface error {\n    /// A resource which represents some error information.\n    ///\n    /// The only method provided by this resource is `to-debug-string`,\n    /// which provides some human-readable information about the error.\n    ///\n    /// In the `wasi:io` package, this resource is returned through the\n    /// `wasi:io/streams/stream-error` type.\n    ///\n    /// To provide more specific error information, other interfaces may\n    /// provide functions to further \"downcast\" this error into more specific\n    /// error information. For example, `error`s returned in streams derived\n    /// from filesystem types to be described using the filesystem\'s own\n    /// error-code type, using the function\n    /// `wasi:filesystem/types/filesystem-error-code`, which takes a parameter\n    /// `borrow<error>` and returns\n    /// `option<wasi:filesystem/types/error-code>`.\n    ///\n    /// The set of functions which can \"downcast\" an `error` into a more\n    /// concrete type is open.\n    resource error {\n        /// Returns a string that is suitable to assist humans in debugging\n        /// this error.\n        ///\n        /// WARNING: The returned string should not be consumed mechanically!\n        /// It may change across platforms, hosts, or other implementation\n        /// details. Parsing this string is a major platform-compatibility\n        /// hazard.\n        to-debug-string: func() -> string;\n    }\n}\n";
        const _: &[u8] = b"package wasi:io@0.2.0;\n\nworld imports {\n    import streams;\n    import poll;\n}\n";
        const _: &[u8] = b"package wasi:io@0.2.0;\n\n/// A poll API intended to let users wait for I/O events on multiple handles\n/// at once.\ninterface poll {\n    /// `pollable` epresents a single I/O event which may be ready, or not.\n    resource pollable {\n\n      /// Return the readiness of a pollable. This function never blocks.\n      ///\n      /// Returns `true` when the pollable is ready, and `false` otherwise.\n      ready: func() -> bool;\n\n      /// `block` returns immediately if the pollable is ready, and otherwise\n      /// blocks until ready.\n      ///\n      /// This function is equivalent to calling `poll.poll` on a list\n      /// containing only this pollable.\n      block: func();\n    }\n\n    /// Poll for completion on a set of pollables.\n    ///\n    /// This function takes a list of pollables, which identify I/O sources of\n    /// interest, and waits until one or more of the events is ready for I/O.\n    ///\n    /// The result `list<u32>` contains one or more indices of handles in the\n    /// argument list that is ready for I/O.\n    ///\n    /// If the list contains more elements than can be indexed with a `u32`\n    /// value, this function traps.\n    ///\n    /// A timeout can be implemented by adding a pollable from the\n    /// wasi-clocks API to the list.\n    ///\n    /// This function does not return a `result`; polling in itself does not\n    /// do any I/O so it doesn\'t fail. If any of the I/O sources identified by\n    /// the pollables has an error, it is indicated by marking the source as\n    /// being reaedy for I/O.\n    poll: func(in: list<borrow<pollable>>) -> list<u32>;\n}\n";
        const _: &[u8] = b"package wasi:clocks@0.2.0;\n/// WASI Monotonic Clock is a clock API intended to let users measure elapsed\n/// time.\n///\n/// It is intended to be portable at least between Unix-family platforms and\n/// Windows.\n///\n/// A monotonic clock is a clock which has an unspecified initial value, and\n/// successive reads of the clock will produce non-decreasing values.\n///\n/// It is intended for measuring elapsed time.\ninterface monotonic-clock {\n    use wasi:io/poll@0.2.0.{pollable};\n\n    /// An instant in time, in nanoseconds. An instant is relative to an\n    /// unspecified initial value, and can only be compared to instances from\n    /// the same monotonic-clock.\n    type instant = u64;\n\n    /// A duration of time, in nanoseconds.\n    type duration = u64;\n\n    /// Read the current value of the clock.\n    ///\n    /// The clock is monotonic, therefore calling this function repeatedly will\n    /// produce a sequence of non-decreasing values.\n    now: func() -> instant;\n\n    /// Query the resolution of the clock. Returns the duration of time\n    /// corresponding to a clock tick.\n    resolution: func() -> duration;\n\n    /// Create a `pollable` which will resolve once the specified instant\n    /// occured.\n    subscribe-instant: func(\n        when: instant,\n    ) -> pollable;\n\n    /// Create a `pollable` which will resolve once the given duration has\n    /// elapsed, starting at the time at which this function was called.\n    /// occured.\n    subscribe-duration: func(\n        when: duration,\n    ) -> pollable;\n}\n";
        const _: &[u8] = b"package wasi:clocks@0.2.0;\n\nworld imports {\n    import monotonic-clock;\n    import wall-clock;\n}\n";
        const _: &[u8] = b"package wasi:clocks@0.2.0;\n/// WASI Wall Clock is a clock API intended to let users query the current\n/// time. The name \"wall\" makes an analogy to a \"clock on the wall\", which\n/// is not necessarily monotonic as it may be reset.\n///\n/// It is intended to be portable at least between Unix-family platforms and\n/// Windows.\n///\n/// A wall clock is a clock which measures the date and time according to\n/// some external reference.\n///\n/// External references may be reset, so this clock is not necessarily\n/// monotonic, making it unsuitable for measuring elapsed time.\n///\n/// It is intended for reporting the current date and time for humans.\ninterface wall-clock {\n    /// A time and date in seconds plus nanoseconds.\n    record datetime {\n        seconds: u64,\n        nanoseconds: u32,\n    }\n\n    /// Read the current value of the clock.\n    ///\n    /// This clock is not monotonic, therefore calling this function repeatedly\n    /// will not necessarily produce a sequence of non-decreasing values.\n    ///\n    /// The returned timestamps represent the number of seconds since\n    /// 1970-01-01T00:00:00Z, also known as [POSIX\'s Seconds Since the Epoch],\n    /// also known as [Unix Time].\n    ///\n    /// The nanoseconds field of the output is always less than 1000000000.\n    ///\n    /// [POSIX\'s Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16\n    /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time\n    now: func() -> datetime;\n\n    /// Query the resolution of the clock.\n    ///\n    /// The nanoseconds field of the output is always less than 1000000000.\n    resolution: func() -> datetime;\n}\n";
        const _: &[u8] = b"package wasi:filesystem@0.2.0;\n\ninterface preopens {\n    use types.{descriptor};\n\n    /// Return the set of preopened directories, and their path.\n    get-directories: func() -> list<tuple<descriptor, string>>;\n}\n";
        const _: &[u8] = b"package wasi:filesystem@0.2.0;\n/// WASI filesystem is a filesystem API primarily intended to let users run WASI\n/// programs that access their files on their existing filesystems, without\n/// significant overhead.\n///\n/// It is intended to be roughly portable between Unix-family platforms and\n/// Windows, though it does not hide many of the major differences.\n///\n/// Paths are passed as interface-type `string`s, meaning they must consist of\n/// a sequence of Unicode Scalar Values (USVs). Some filesystems may contain\n/// paths which are not accessible by this API.\n///\n/// The directory separator in WASI is always the forward-slash (`/`).\n///\n/// All paths in WASI are relative paths, and are interpreted relative to a\n/// `descriptor` referring to a base directory. If a `path` argument to any WASI\n/// function starts with `/`, or if any step of resolving a `path`, including\n/// `..` and symbolic link steps, reaches a directory outside of the base\n/// directory, or reaches a symlink to an absolute or rooted path in the\n/// underlying filesystem, the function fails with `error-code::not-permitted`.\n///\n/// For more information about WASI path resolution and sandboxing, see\n/// [WASI filesystem path resolution].\n///\n/// [WASI filesystem path resolution]: https://github.com/WebAssembly/wasi-filesystem/blob/main/path-resolution.md\ninterface types {\n    use wasi:io/streams@0.2.0.{input-stream, output-stream, error};\n    use wasi:clocks/wall-clock@0.2.0.{datetime};\n\n    /// File size or length of a region within a file.\n    type filesize = u64;\n\n    /// The type of a filesystem object referenced by a descriptor.\n    ///\n    /// Note: This was called `filetype` in earlier versions of WASI.\n    enum descriptor-type {\n        /// The type of the descriptor or file is unknown or is different from\n        /// any of the other types specified.\n        unknown,\n        /// The descriptor refers to a block device inode.\n        block-device,\n        /// The descriptor refers to a character device inode.\n        character-device,\n        /// The descriptor refers to a directory inode.\n        directory,\n        /// The descriptor refers to a named pipe.\n        fifo,\n        /// The file refers to a symbolic link inode.\n        symbolic-link,\n        /// The descriptor refers to a regular file inode.\n        regular-file,\n        /// The descriptor refers to a socket.\n        socket,\n    }\n\n    /// Descriptor flags.\n    ///\n    /// Note: This was called `fdflags` in earlier versions of WASI.\n    flags descriptor-flags {\n        /// Read mode: Data can be read.\n        read,\n        /// Write mode: Data can be written to.\n        write,\n        /// Request that writes be performed according to synchronized I/O file\n        /// integrity completion. The data stored in the file and the file\'s\n        /// metadata are synchronized. This is similar to `O_SYNC` in POSIX.\n        ///\n        /// The precise semantics of this operation have not yet been defined for\n        /// WASI. At this time, it should be interpreted as a request, and not a\n        /// requirement.\n        file-integrity-sync,\n        /// Request that writes be performed according to synchronized I/O data\n        /// integrity completion. Only the data stored in the file is\n        /// synchronized. This is similar to `O_DSYNC` in POSIX.\n        ///\n        /// The precise semantics of this operation have not yet been defined for\n        /// WASI. At this time, it should be interpreted as a request, and not a\n        /// requirement.\n        data-integrity-sync,\n        /// Requests that reads be performed at the same level of integrety\n        /// requested for writes. This is similar to `O_RSYNC` in POSIX.\n        ///\n        /// The precise semantics of this operation have not yet been defined for\n        /// WASI. At this time, it should be interpreted as a request, and not a\n        /// requirement.\n        requested-write-sync,\n        /// Mutating directories mode: Directory contents may be mutated.\n        ///\n        /// When this flag is unset on a descriptor, operations using the\n        /// descriptor which would create, rename, delete, modify the data or\n        /// metadata of filesystem objects, or obtain another handle which\n        /// would permit any of those, shall fail with `error-code::read-only` if\n        /// they would otherwise succeed.\n        ///\n        /// This may only be set on directories.\n        mutate-directory,\n    }\n\n    /// File attributes.\n    ///\n    /// Note: This was called `filestat` in earlier versions of WASI.\n    record descriptor-stat {\n        /// File type.\n        %type: descriptor-type,\n        /// Number of hard links to the file.\n        link-count: link-count,\n        /// For regular files, the file size in bytes. For symbolic links, the\n        /// length in bytes of the pathname contained in the symbolic link.\n        size: filesize,\n        /// Last data access timestamp.\n        ///\n        /// If the `option` is none, the platform doesn\'t maintain an access\n        /// timestamp for this file.\n        data-access-timestamp: option<datetime>,\n        /// Last data modification timestamp.\n        ///\n        /// If the `option` is none, the platform doesn\'t maintain a\n        /// modification timestamp for this file.\n        data-modification-timestamp: option<datetime>,\n        /// Last file status-change timestamp.\n        ///\n        /// If the `option` is none, the platform doesn\'t maintain a\n        /// status-change timestamp for this file.\n        status-change-timestamp: option<datetime>,\n    }\n\n    /// Flags determining the method of how paths are resolved.\n    flags path-flags {\n        /// As long as the resolved path corresponds to a symbolic link, it is\n        /// expanded.\n        symlink-follow,\n    }\n\n    /// Open flags used by `open-at`.\n    flags open-flags {\n        /// Create file if it does not exist, similar to `O_CREAT` in POSIX.\n        create,\n        /// Fail if not a directory, similar to `O_DIRECTORY` in POSIX.\n        directory,\n        /// Fail if file already exists, similar to `O_EXCL` in POSIX.\n        exclusive,\n        /// Truncate file to size 0, similar to `O_TRUNC` in POSIX.\n        truncate,\n    }\n\n    /// Number of hard links to an inode.\n    type link-count = u64;\n\n    /// When setting a timestamp, this gives the value to set it to.\n    variant new-timestamp {\n        /// Leave the timestamp set to its previous value.\n        no-change,\n        /// Set the timestamp to the current time of the system clock associated\n        /// with the filesystem.\n        now,\n        /// Set the timestamp to the given value.\n        timestamp(datetime),\n    }\n\n    /// A directory entry.\n    record directory-entry {\n        /// The type of the file referred to by this directory entry.\n        %type: descriptor-type,\n\n        /// The name of the object.\n        name: string,\n    }\n\n    /// Error codes returned by functions, similar to `errno` in POSIX.\n    /// Not all of these error codes are returned by the functions provided by this\n    /// API; some are used in higher-level library layers, and others are provided\n    /// merely for alignment with POSIX.\n    enum error-code {\n        /// Permission denied, similar to `EACCES` in POSIX.\n        access,\n        /// Resource unavailable, or operation would block, similar to `EAGAIN` and `EWOULDBLOCK` in POSIX.\n        would-block,\n        /// Connection already in progress, similar to `EALREADY` in POSIX.\n        already,\n        /// Bad descriptor, similar to `EBADF` in POSIX.\n        bad-descriptor,\n        /// Device or resource busy, similar to `EBUSY` in POSIX.\n        busy,\n        /// Resource deadlock would occur, similar to `EDEADLK` in POSIX.\n        deadlock,\n        /// Storage quota exceeded, similar to `EDQUOT` in POSIX.\n        quota,\n        /// File exists, similar to `EEXIST` in POSIX.\n        exist,\n        /// File too large, similar to `EFBIG` in POSIX.\n        file-too-large,\n        /// Illegal byte sequence, similar to `EILSEQ` in POSIX.\n        illegal-byte-sequence,\n        /// Operation in progress, similar to `EINPROGRESS` in POSIX.\n        in-progress,\n        /// Interrupted function, similar to `EINTR` in POSIX.\n        interrupted,\n        /// Invalid argument, similar to `EINVAL` in POSIX.\n        invalid,\n        /// I/O error, similar to `EIO` in POSIX.\n        io,\n        /// Is a directory, similar to `EISDIR` in POSIX.\n        is-directory,\n        /// Too many levels of symbolic links, similar to `ELOOP` in POSIX.\n        loop,\n        /// Too many links, similar to `EMLINK` in POSIX.\n        too-many-links,\n        /// Message too large, similar to `EMSGSIZE` in POSIX.\n        message-size,\n        /// Filename too long, similar to `ENAMETOOLONG` in POSIX.\n        name-too-long,\n        /// No such device, similar to `ENODEV` in POSIX.\n        no-device,\n        /// No such file or directory, similar to `ENOENT` in POSIX.\n        no-entry,\n        /// No locks available, similar to `ENOLCK` in POSIX.\n        no-lock,\n        /// Not enough space, similar to `ENOMEM` in POSIX.\n        insufficient-memory,\n        /// No space left on device, similar to `ENOSPC` in POSIX.\n        insufficient-space,\n        /// Not a directory or a symbolic link to a directory, similar to `ENOTDIR` in POSIX.\n        not-directory,\n        /// Directory not empty, similar to `ENOTEMPTY` in POSIX.\n        not-empty,\n        /// State not recoverable, similar to `ENOTRECOVERABLE` in POSIX.\n        not-recoverable,\n        /// Not supported, similar to `ENOTSUP` and `ENOSYS` in POSIX.\n        unsupported,\n        /// Inappropriate I/O control operation, similar to `ENOTTY` in POSIX.\n        no-tty,\n        /// No such device or address, similar to `ENXIO` in POSIX.\n        no-such-device,\n        /// Value too large to be stored in data type, similar to `EOVERFLOW` in POSIX.\n        overflow,\n        /// Operation not permitted, similar to `EPERM` in POSIX.\n        not-permitted,\n        /// Broken pipe, similar to `EPIPE` in POSIX.\n        pipe,\n        /// Read-only file system, similar to `EROFS` in POSIX.\n        read-only,\n        /// Invalid seek, similar to `ESPIPE` in POSIX.\n        invalid-seek,\n        /// Text file busy, similar to `ETXTBSY` in POSIX.\n        text-file-busy,\n        /// Cross-device link, similar to `EXDEV` in POSIX.\n        cross-device,\n    }\n\n    /// File or memory access pattern advisory information.\n    enum advice {\n        /// The application has no advice to give on its behavior with respect\n        /// to the specified data.\n        normal,\n        /// The application expects to access the specified data sequentially\n        /// from lower offsets to higher offsets.\n        sequential,\n        /// The application expects to access the specified data in a random\n        /// order.\n        random,\n        /// The application expects to access the specified data in the near\n        /// future.\n        will-need,\n        /// The application expects that it will not access the specified data\n        /// in the near future.\n        dont-need,\n        /// The application expects to access the specified data once and then\n        /// not reuse it thereafter.\n        no-reuse,\n    }\n\n    /// A 128-bit hash value, split into parts because wasm doesn\'t have a\n    /// 128-bit integer type.\n    record metadata-hash-value {\n       /// 64 bits of a 128-bit hash value.\n       lower: u64,\n       /// Another 64 bits of a 128-bit hash value.\n       upper: u64,\n    }\n\n    /// A descriptor is a reference to a filesystem object, which may be a file,\n    /// directory, named pipe, special file, or other object on which filesystem\n    /// calls may be made.\n    resource descriptor {\n        /// Return a stream for reading from a file, if available.\n        ///\n        /// May fail with an error-code describing why the file cannot be read.\n        ///\n        /// Multiple read, write, and append streams may be active on the same open\n        /// file and they do not interfere with each other.\n        ///\n        /// Note: This allows using `read-stream`, which is similar to `read` in POSIX.\n        read-via-stream: func(\n            /// The offset within the file at which to start reading.\n            offset: filesize,\n        ) -> result<input-stream, error-code>;\n\n        /// Return a stream for writing to a file, if available.\n        ///\n        /// May fail with an error-code describing why the file cannot be written.\n        ///\n        /// Note: This allows using `write-stream`, which is similar to `write` in\n        /// POSIX.\n        write-via-stream: func(\n            /// The offset within the file at which to start writing.\n            offset: filesize,\n        ) -> result<output-stream, error-code>;\n\n        /// Return a stream for appending to a file, if available.\n        ///\n        /// May fail with an error-code describing why the file cannot be appended.\n        ///\n        /// Note: This allows using `write-stream`, which is similar to `write` with\n        /// `O_APPEND` in in POSIX.\n        append-via-stream: func() -> result<output-stream, error-code>;\n\n        /// Provide file advisory information on a descriptor.\n        ///\n        /// This is similar to `posix_fadvise` in POSIX.\n        advise: func(\n            /// The offset within the file to which the advisory applies.\n            offset: filesize,\n            /// The length of the region to which the advisory applies.\n            length: filesize,\n            /// The advice.\n            advice: advice\n        ) -> result<_, error-code>;\n\n        /// Synchronize the data of a file to disk.\n        ///\n        /// This function succeeds with no effect if the file descriptor is not\n        /// opened for writing.\n        ///\n        /// Note: This is similar to `fdatasync` in POSIX.\n        sync-data: func() -> result<_, error-code>;\n\n        /// Get flags associated with a descriptor.\n        ///\n        /// Note: This returns similar flags to `fcntl(fd, F_GETFL)` in POSIX.\n        ///\n        /// Note: This returns the value that was the `fs_flags` value returned\n        /// from `fdstat_get` in earlier versions of WASI.\n        get-flags: func() -> result<descriptor-flags, error-code>;\n\n        /// Get the dynamic type of a descriptor.\n        ///\n        /// Note: This returns the same value as the `type` field of the `fd-stat`\n        /// returned by `stat`, `stat-at` and similar.\n        ///\n        /// Note: This returns similar flags to the `st_mode & S_IFMT` value provided\n        /// by `fstat` in POSIX.\n        ///\n        /// Note: This returns the value that was the `fs_filetype` value returned\n        /// from `fdstat_get` in earlier versions of WASI.\n        get-type: func() -> result<descriptor-type, error-code>;\n\n        /// Adjust the size of an open file. If this increases the file\'s size, the\n        /// extra bytes are filled with zeros.\n        ///\n        /// Note: This was called `fd_filestat_set_size` in earlier versions of WASI.\n        set-size: func(size: filesize) -> result<_, error-code>;\n\n        /// Adjust the timestamps of an open file or directory.\n        ///\n        /// Note: This is similar to `futimens` in POSIX.\n        ///\n        /// Note: This was called `fd_filestat_set_times` in earlier versions of WASI.\n        set-times: func(\n            /// The desired values of the data access timestamp.\n            data-access-timestamp: new-timestamp,\n            /// The desired values of the data modification timestamp.\n            data-modification-timestamp: new-timestamp,\n        ) -> result<_, error-code>;\n\n        /// Read from a descriptor, without using and updating the descriptor\'s offset.\n        ///\n        /// This function returns a list of bytes containing the data that was\n        /// read, along with a bool which, when true, indicates that the end of the\n        /// file was reached. The returned list will contain up to `length` bytes; it\n        /// may return fewer than requested, if the end of the file is reached or\n        /// if the I/O operation is interrupted.\n        ///\n        /// In the future, this may change to return a `stream<u8, error-code>`.\n        ///\n        /// Note: This is similar to `pread` in POSIX.\n        read: func(\n            /// The maximum number of bytes to read.\n            length: filesize,\n            /// The offset within the file at which to read.\n            offset: filesize,\n        ) -> result<tuple<list<u8>, bool>, error-code>;\n\n        /// Write to a descriptor, without using and updating the descriptor\'s offset.\n        ///\n        /// It is valid to write past the end of a file; the file is extended to the\n        /// extent of the write, with bytes between the previous end and the start of\n        /// the write set to zero.\n        ///\n        /// In the future, this may change to take a `stream<u8, error-code>`.\n        ///\n        /// Note: This is similar to `pwrite` in POSIX.\n        write: func(\n            /// Data to write\n            buffer: list<u8>,\n            /// The offset within the file at which to write.\n            offset: filesize,\n        ) -> result<filesize, error-code>;\n\n        /// Read directory entries from a directory.\n        ///\n        /// On filesystems where directories contain entries referring to themselves\n        /// and their parents, often named `.` and `..` respectively, these entries\n        /// are omitted.\n        ///\n        /// This always returns a new stream which starts at the beginning of the\n        /// directory. Multiple streams may be active on the same directory, and they\n        /// do not interfere with each other.\n        read-directory: func() -> result<directory-entry-stream, error-code>;\n\n        /// Synchronize the data and metadata of a file to disk.\n        ///\n        /// This function succeeds with no effect if the file descriptor is not\n        /// opened for writing.\n        ///\n        /// Note: This is similar to `fsync` in POSIX.\n        sync: func() -> result<_, error-code>;\n\n        /// Create a directory.\n        ///\n        /// Note: This is similar to `mkdirat` in POSIX.\n        create-directory-at: func(\n            /// The relative path at which to create the directory.\n            path: string,\n        ) -> result<_, error-code>;\n\n        /// Return the attributes of an open file or directory.\n        ///\n        /// Note: This is similar to `fstat` in POSIX, except that it does not return\n        /// device and inode information. For testing whether two descriptors refer to\n        /// the same underlying filesystem object, use `is-same-object`. To obtain\n        /// additional data that can be used do determine whether a file has been\n        /// modified, use `metadata-hash`.\n        ///\n        /// Note: This was called `fd_filestat_get` in earlier versions of WASI.\n        stat: func() -> result<descriptor-stat, error-code>;\n\n        /// Return the attributes of a file or directory.\n        ///\n        /// Note: This is similar to `fstatat` in POSIX, except that it does not\n        /// return device and inode information. See the `stat` description for a\n        /// discussion of alternatives.\n        ///\n        /// Note: This was called `path_filestat_get` in earlier versions of WASI.\n        stat-at: func(\n            /// Flags determining the method of how the path is resolved.\n            path-flags: path-flags,\n            /// The relative path of the file or directory to inspect.\n            path: string,\n        ) -> result<descriptor-stat, error-code>;\n\n        /// Adjust the timestamps of a file or directory.\n        ///\n        /// Note: This is similar to `utimensat` in POSIX.\n        ///\n        /// Note: This was called `path_filestat_set_times` in earlier versions of\n        /// WASI.\n        set-times-at: func(\n            /// Flags determining the method of how the path is resolved.\n            path-flags: path-flags,\n            /// The relative path of the file or directory to operate on.\n            path: string,\n            /// The desired values of the data access timestamp.\n            data-access-timestamp: new-timestamp,\n            /// The desired values of the data modification timestamp.\n            data-modification-timestamp: new-timestamp,\n        ) -> result<_, error-code>;\n\n        /// Create a hard link.\n        ///\n        /// Note: This is similar to `linkat` in POSIX.\n        link-at: func(\n            /// Flags determining the method of how the path is resolved.\n            old-path-flags: path-flags,\n            /// The relative source path from which to link.\n            old-path: string,\n            /// The base directory for `new-path`.\n            new-descriptor: borrow<descriptor>,\n            /// The relative destination path at which to create the hard link.\n            new-path: string,\n        ) -> result<_, error-code>;\n\n        /// Open a file or directory.\n        ///\n        /// The returned descriptor is not guaranteed to be the lowest-numbered\n        /// descriptor not currently open/ it is randomized to prevent applications\n        /// from depending on making assumptions about indexes, since this is\n        /// error-prone in multi-threaded contexts. The returned descriptor is\n        /// guaranteed to be less than 2**31.\n        ///\n        /// If `flags` contains `descriptor-flags::mutate-directory`, and the base\n        /// descriptor doesn\'t have `descriptor-flags::mutate-directory` set,\n        /// `open-at` fails with `error-code::read-only`.\n        ///\n        /// If `flags` contains `write` or `mutate-directory`, or `open-flags`\n        /// contains `truncate` or `create`, and the base descriptor doesn\'t have\n        /// `descriptor-flags::mutate-directory` set, `open-at` fails with\n        /// `error-code::read-only`.\n        ///\n        /// Note: This is similar to `openat` in POSIX.\n        open-at: func(\n            /// Flags determining the method of how the path is resolved.\n            path-flags: path-flags,\n            /// The relative path of the object to open.\n            path: string,\n            /// The method by which to open the file.\n            open-flags: open-flags,\n            /// Flags to use for the resulting descriptor.\n            %flags: descriptor-flags,\n        ) -> result<descriptor, error-code>;\n\n        /// Read the contents of a symbolic link.\n        ///\n        /// If the contents contain an absolute or rooted path in the underlying\n        /// filesystem, this function fails with `error-code::not-permitted`.\n        ///\n        /// Note: This is similar to `readlinkat` in POSIX.\n        readlink-at: func(\n            /// The relative path of the symbolic link from which to read.\n            path: string,\n        ) -> result<string, error-code>;\n\n        /// Remove a directory.\n        ///\n        /// Return `error-code::not-empty` if the directory is not empty.\n        ///\n        /// Note: This is similar to `unlinkat(fd, path, AT_REMOVEDIR)` in POSIX.\n        remove-directory-at: func(\n            /// The relative path to a directory to remove.\n            path: string,\n        ) -> result<_, error-code>;\n\n        /// Rename a filesystem object.\n        ///\n        /// Note: This is similar to `renameat` in POSIX.\n        rename-at: func(\n            /// The relative source path of the file or directory to rename.\n            old-path: string,\n            /// The base directory for `new-path`.\n            new-descriptor: borrow<descriptor>,\n            /// The relative destination path to which to rename the file or directory.\n            new-path: string,\n        ) -> result<_, error-code>;\n\n        /// Create a symbolic link (also known as a \"symlink\").\n        ///\n        /// If `old-path` starts with `/`, the function fails with\n        /// `error-code::not-permitted`.\n        ///\n        /// Note: This is similar to `symlinkat` in POSIX.\n        symlink-at: func(\n            /// The contents of the symbolic link.\n            old-path: string,\n            /// The relative destination path at which to create the symbolic link.\n            new-path: string,\n        ) -> result<_, error-code>;\n\n        /// Unlink a filesystem object that is not a directory.\n        ///\n        /// Return `error-code::is-directory` if the path refers to a directory.\n        /// Note: This is similar to `unlinkat(fd, path, 0)` in POSIX.\n        unlink-file-at: func(\n            /// The relative path to a file to unlink.\n            path: string,\n        ) -> result<_, error-code>;\n\n        /// Test whether two descriptors refer to the same filesystem object.\n        ///\n        /// In POSIX, this corresponds to testing whether the two descriptors have the\n        /// same device (`st_dev`) and inode (`st_ino` or `d_ino`) numbers.\n        /// wasi-filesystem does not expose device and inode numbers, so this function\n        /// may be used instead.\n        is-same-object: func(other: borrow<descriptor>) -> bool;\n\n        /// Return a hash of the metadata associated with a filesystem object referred\n        /// to by a descriptor.\n        ///\n        /// This returns a hash of the last-modification timestamp and file size, and\n        /// may also include the inode number, device number, birth timestamp, and\n        /// other metadata fields that may change when the file is modified or\n        /// replaced. It may also include a secret value chosen by the\n        /// implementation and not otherwise exposed.\n        ///\n        /// Implementations are encourated to provide the following properties:\n        ///\n        ///  - If the file is not modified or replaced, the computed hash value should\n        ///    usually not change.\n        ///  - If the object is modified or replaced, the computed hash value should\n        ///    usually change.\n        ///  - The inputs to the hash should not be easily computable from the\n        ///    computed hash.\n        ///\n        /// However, none of these is required.\n        metadata-hash: func() -> result<metadata-hash-value, error-code>;\n\n        /// Return a hash of the metadata associated with a filesystem object referred\n        /// to by a directory descriptor and a relative path.\n        ///\n        /// This performs the same hash computation as `metadata-hash`.\n        metadata-hash-at: func(\n            /// Flags determining the method of how the path is resolved.\n            path-flags: path-flags,\n            /// The relative path of the file or directory to inspect.\n            path: string,\n        ) -> result<metadata-hash-value, error-code>;\n    }\n\n    /// A stream of directory entries.\n    resource directory-entry-stream {\n        /// Read a single directory entry from a `directory-entry-stream`.\n        read-directory-entry: func() -> result<option<directory-entry>, error-code>;\n    }\n\n    /// Attempts to extract a filesystem-related `error-code` from the stream\n    /// `error` provided.\n    ///\n    /// Stream operations which return `stream-error::last-operation-failed`\n    /// have a payload with more information about the operation that failed.\n    /// This payload can be passed through to this function to see if there\'s\n    /// filesystem-related information about the error to return.\n    ///\n    /// Note that this function is fallible because not all stream-related\n    /// errors are filesystem-related errors.\n    filesystem-error-code: func(err: borrow<error>) -> option<error-code>;\n}\n";
        const _: &[u8] = b"package wasi:filesystem@0.2.0;\n\nworld imports {\n    import types;\n    import preopens;\n}\n";
        const _: &[u8] = b"\ninterface ip-name-lookup {\n    use wasi:io/poll@0.2.0.{pollable};\n    use network.{network, error-code, ip-address};\n\n\n    /// Resolve an internet host name to a list of IP addresses.\n    ///\n    /// Unicode domain names are automatically converted to ASCII using IDNA encoding.\n    /// If the input is an IP address string, the address is parsed and returned\n    /// as-is without making any external requests.\n    ///\n    /// See the wasi-socket proposal README.md for a comparison with getaddrinfo.\n    ///\n    /// This function never blocks. It either immediately fails or immediately\n    /// returns successfully with a `resolve-address-stream` that can be used\n    /// to (asynchronously) fetch the results.\n    ///\n    /// # Typical errors\n    /// - `invalid-argument`: `name` is a syntactically invalid domain name or IP address.\n    ///\n    /// # References:\n    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getaddrinfo.html>\n    /// - <https://man7.org/linux/man-pages/man3/getaddrinfo.3.html>\n    /// - <https://learn.microsoft.com/en-us/windows/win32/api/ws2tcpip/nf-ws2tcpip-getaddrinfo>\n    /// - <https://man.freebsd.org/cgi/man.cgi?query=getaddrinfo&sektion=3>\n    resolve-addresses: func(network: borrow<network>, name: string) -> result<resolve-address-stream, error-code>;\n\n    resource resolve-address-stream {\n        /// Returns the next address from the resolver.\n        ///\n        /// This function should be called multiple times. On each call, it will\n        /// return the next address in connection order preference. If all\n        /// addresses have been exhausted, this function returns `none`.\n        ///\n        /// This function never returns IPv4-mapped IPv6 addresses.\n        ///\n        /// # Typical errors\n        /// - `name-unresolvable`:          Name does not exist or has no suitable associated IP addresses. (EAI_NONAME, EAI_NODATA, EAI_ADDRFAMILY)\n        /// - `temporary-resolver-failure`: A temporary failure in name resolution occurred. (EAI_AGAIN)\n        /// - `permanent-resolver-failure`: A permanent failure in name resolution occurred. (EAI_FAIL)\n        /// - `would-block`:                A result is not available yet. (EWOULDBLOCK, EAGAIN)\n        resolve-next-address: func() -> result<option<ip-address>, error-code>;\n\n        /// Create a `pollable` which will resolve once the stream is ready for I/O.\n        ///\n        /// Note: this function is here for WASI Preview2 only.\n        /// It\'s planned to be removed when `future` is natively supported in Preview3.\n        subscribe: func() -> pollable;\n    }\n}\n";
        const _: &[u8] = b"\ninterface tcp {\n    use wasi:io/streams@0.2.0.{input-stream, output-stream};\n    use wasi:io/poll@0.2.0.{pollable};\n    use wasi:clocks/monotonic-clock@0.2.0.{duration};\n    use network.{network, error-code, ip-socket-address, ip-address-family};\n\n    enum shutdown-type {\n        /// Similar to `SHUT_RD` in POSIX.\n        receive,\n\n        /// Similar to `SHUT_WR` in POSIX.\n        send,\n\n        /// Similar to `SHUT_RDWR` in POSIX.\n        both,\n    }\n\n\n    /// A TCP socket handle.\n    resource tcp-socket {\n        /// Bind the socket to a specific network on the provided IP address and port.\n        ///\n        /// If the IP address is zero (`0.0.0.0` in IPv4, `::` in IPv6), it is left to the implementation to decide which\n        /// network interface(s) to bind to.\n        /// If the TCP/UDP port is zero, the socket will be bound to a random free port.\n        ///\n        /// Unlike in POSIX, this function is async. This enables interactive WASI hosts to inject permission prompts.\n        ///\n        /// # Typical `start` errors\n        /// - `invalid-argument`:          The `local-address` has the wrong address family. (EAFNOSUPPORT, EFAULT on Windows)\n        /// - `invalid-argument`:          `local-address` is not a unicast address. (EINVAL)\n        /// - `invalid-argument`:          `local-address` is an IPv4-mapped IPv6 address. (EINVAL)\n        /// - `invalid-state`:             The socket is already bound. (EINVAL)\n        ///\n        /// # Typical `finish` errors\n        /// - `address-in-use`:            No ephemeral ports available. (EADDRINUSE, ENOBUFS on Windows)\n        /// - `address-in-use`:            Address is already in use. (EADDRINUSE)\n        /// - `address-not-bindable`:      `local-address` is not an address that the `network` can bind to. (EADDRNOTAVAIL)\n        /// - `not-in-progress`:           A `bind` operation is not in progress.\n        /// - `would-block`:               Can\'t finish the operation, it is still in progress. (EWOULDBLOCK, EAGAIN)\n        /// \n        /// # Implementors note\n        /// When binding to a non-zero port, this bind operation shouldn\'t be affected by the TIME_WAIT\n        /// state of a recently closed socket on the same local address. In practice this means that the SO_REUSEADDR \n        /// socket option should be set implicitly on all platforms, except on Windows where this is the default behavior\n        /// and SO_REUSEADDR performs something different entirely.\n        ///\n        /// # References\n        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/bind.html>\n        /// - <https://man7.org/linux/man-pages/man2/bind.2.html>\n        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-bind>\n        /// - <https://man.freebsd.org/cgi/man.cgi?query=bind&sektion=2&format=html>\n        start-bind: func(network: borrow<network>, local-address: ip-socket-address) -> result<_, error-code>;\n        finish-bind: func() -> result<_, error-code>;\n\n        /// Connect to a remote endpoint.\n        ///\n        /// On success:\n        /// - the socket is transitioned into the Connection state\n        /// - a pair of streams is returned that can be used to read & write to the connection\n        ///\n        /// After a failed connection attempt, the only valid action left is to\n        /// `drop` the socket. A single socket can not be used to connect more than once.\n        ///\n        /// # Typical `start` errors\n        /// - `invalid-argument`:          The `remote-address` has the wrong address family. (EAFNOSUPPORT)\n        /// - `invalid-argument`:          `remote-address` is not a unicast address. (EINVAL, ENETUNREACH on Linux, EAFNOSUPPORT on MacOS)\n        /// - `invalid-argument`:          `remote-address` is an IPv4-mapped IPv6 address. (EINVAL, EADDRNOTAVAIL on Illumos)\n        /// - `invalid-argument`:          The IP address in `remote-address` is set to INADDR_ANY (`0.0.0.0` / `::`). (EADDRNOTAVAIL on Windows)\n        /// - `invalid-argument`:          The port in `remote-address` is set to 0. (EADDRNOTAVAIL on Windows)\n        /// - `invalid-argument`:          The socket is already attached to a different network. The `network` passed to `connect` must be identical to the one passed to `bind`.\n        /// - `invalid-state`:             The socket is already in the Connection state. (EISCONN)\n        /// - `invalid-state`:             The socket is already in the Listener state. (EOPNOTSUPP, EINVAL on Windows)\n        ///\n        /// # Typical `finish` errors\n        /// - `timeout`:                   Connection timed out. (ETIMEDOUT)\n        /// - `connection-refused`:        The connection was forcefully rejected. (ECONNREFUSED)\n        /// - `connection-reset`:          The connection was reset. (ECONNRESET)\n        /// - `connection-aborted`:        The connection was aborted. (ECONNABORTED)\n        /// - `remote-unreachable`:        The remote address is not reachable. (EHOSTUNREACH, EHOSTDOWN, ENETUNREACH, ENETDOWN, ENONET)\n        /// - `address-in-use`:            Tried to perform an implicit bind, but there were no ephemeral ports available. (EADDRINUSE, EADDRNOTAVAIL on Linux, EAGAIN on BSD)\n        /// - `not-in-progress`:           A `connect` operation is not in progress.\n        /// - `would-block`:               Can\'t finish the operation, it is still in progress. (EWOULDBLOCK, EAGAIN)\n        ///\n        /// # References\n        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/connect.html>\n        /// - <https://man7.org/linux/man-pages/man2/connect.2.html>\n        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-connect>\n        /// - <https://man.freebsd.org/cgi/man.cgi?connect>\n        start-connect: func(network: borrow<network>, remote-address: ip-socket-address) -> result<_, error-code>;\n        finish-connect: func() -> result<tuple<input-stream, output-stream>, error-code>;\n\n        /// Start listening for new connections.\n        ///\n        /// Transitions the socket into the Listener state.\n        ///\n        /// Unlike POSIX:\n        /// - this function is async. This enables interactive WASI hosts to inject permission prompts.\n        /// - the socket must already be explicitly bound.\n        ///\n        /// # Typical `start` errors\n        /// - `invalid-state`:             The socket is not bound to any local address. (EDESTADDRREQ)\n        /// - `invalid-state`:             The socket is already in the Connection state. (EISCONN, EINVAL on BSD)\n        /// - `invalid-state`:             The socket is already in the Listener state.\n        ///\n        /// # Typical `finish` errors\n        /// - `address-in-use`:            Tried to perform an implicit bind, but there were no ephemeral ports available. (EADDRINUSE)\n        /// - `not-in-progress`:           A `listen` operation is not in progress.\n        /// - `would-block`:               Can\'t finish the operation, it is still in progress. (EWOULDBLOCK, EAGAIN)\n        ///\n        /// # References\n        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/listen.html>\n        /// - <https://man7.org/linux/man-pages/man2/listen.2.html>\n        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-listen>\n        /// - <https://man.freebsd.org/cgi/man.cgi?query=listen&sektion=2>\n        start-listen: func() -> result<_, error-code>;\n        finish-listen: func() -> result<_, error-code>;\n\n        /// Accept a new client socket.\n        ///\n        /// The returned socket is bound and in the Connection state. The following properties are inherited from the listener socket:\n        /// - `address-family`\n        /// - `keep-alive-enabled`\n        /// - `keep-alive-idle-time`\n        /// - `keep-alive-interval`\n        /// - `keep-alive-count`\n        /// - `hop-limit`\n        /// - `receive-buffer-size`\n        /// - `send-buffer-size`\n        ///\n        /// On success, this function returns the newly accepted client socket along with\n        /// a pair of streams that can be used to read & write to the connection.\n        ///\n        /// # Typical errors\n        /// - `invalid-state`:      Socket is not in the Listener state. (EINVAL)\n        /// - `would-block`:        No pending connections at the moment. (EWOULDBLOCK, EAGAIN)\n        /// - `connection-aborted`: An incoming connection was pending, but was terminated by the client before this listener could accept it. (ECONNABORTED)\n        /// - `new-socket-limit`:   The new socket resource could not be created because of a system limit. (EMFILE, ENFILE)\n        ///\n        /// # References\n        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/accept.html>\n        /// - <https://man7.org/linux/man-pages/man2/accept.2.html>\n        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-accept>\n        /// - <https://man.freebsd.org/cgi/man.cgi?query=accept&sektion=2>\n        accept: func() -> result<tuple<tcp-socket, input-stream, output-stream>, error-code>;\n\n        /// Get the bound local address.\n        ///\n        /// POSIX mentions:\n        /// > If the socket has not been bound to a local name, the value\n        /// > stored in the object pointed to by `address` is unspecified.\n        ///\n        /// WASI is stricter and requires `local-address` to return `invalid-state` when the socket hasn\'t been bound yet.\n        ///\n        /// # Typical errors\n        /// - `invalid-state`: The socket is not bound to any local address.\n        ///\n        /// # References\n        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getsockname.html>\n        /// - <https://man7.org/linux/man-pages/man2/getsockname.2.html>\n        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-getsockname>\n        /// - <https://man.freebsd.org/cgi/man.cgi?getsockname>\n        local-address: func() -> result<ip-socket-address, error-code>;\n\n        /// Get the remote address.\n        ///\n        /// # Typical errors\n        /// - `invalid-state`: The socket is not connected to a remote address. (ENOTCONN)\n        ///\n        /// # References\n        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getpeername.html>\n        /// - <https://man7.org/linux/man-pages/man2/getpeername.2.html>\n        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-getpeername>\n        /// - <https://man.freebsd.org/cgi/man.cgi?query=getpeername&sektion=2&n=1>\n        remote-address: func() -> result<ip-socket-address, error-code>;\n\n        /// Whether the socket is listening for new connections.\n        ///\n        /// Equivalent to the SO_ACCEPTCONN socket option.\n        is-listening: func() -> bool;\n\n        /// Whether this is a IPv4 or IPv6 socket.\n        ///\n        /// Equivalent to the SO_DOMAIN socket option.\n        address-family: func() -> ip-address-family;\n\n        /// Hints the desired listen queue size. Implementations are free to ignore this.\n        ///\n        /// If the provided value is 0, an `invalid-argument` error is returned.\n        /// Any other value will never cause an error, but it might be silently clamped and/or rounded.\n        ///\n        /// # Typical errors\n        /// - `not-supported`:        (set) The platform does not support changing the backlog size after the initial listen.\n        /// - `invalid-argument`:     (set) The provided value was 0.\n        /// - `invalid-state`:        (set) The socket is already in the Connection state.\n        set-listen-backlog-size: func(value: u64) -> result<_, error-code>;\n\n        /// Enables or disables keepalive.\n        ///\n        /// The keepalive behavior can be adjusted using:\n        /// - `keep-alive-idle-time`\n        /// - `keep-alive-interval`\n        /// - `keep-alive-count`\n        /// These properties can be configured while `keep-alive-enabled` is false, but only come into effect when `keep-alive-enabled` is true.\n        ///\n        /// Equivalent to the SO_KEEPALIVE socket option.\n        keep-alive-enabled: func() -> result<bool, error-code>;\n        set-keep-alive-enabled: func(value: bool) -> result<_, error-code>;\n\n        /// Amount of time the connection has to be idle before TCP starts sending keepalive packets.\n        ///\n        /// If the provided value is 0, an `invalid-argument` error is returned.\n        /// Any other value will never cause an error, but it might be silently clamped and/or rounded.\n        /// I.e. after setting a value, reading the same setting back may return a different value.\n        ///\n        /// Equivalent to the TCP_KEEPIDLE socket option. (TCP_KEEPALIVE on MacOS)\n        ///\n        /// # Typical errors\n        /// - `invalid-argument`:     (set) The provided value was 0.\n        keep-alive-idle-time: func() -> result<duration, error-code>;\n        set-keep-alive-idle-time: func(value: duration) -> result<_, error-code>;\n\n        /// The time between keepalive packets.\n        ///\n        /// If the provided value is 0, an `invalid-argument` error is returned.\n        /// Any other value will never cause an error, but it might be silently clamped and/or rounded.\n        /// I.e. after setting a value, reading the same setting back may return a different value.\n        ///\n        /// Equivalent to the TCP_KEEPINTVL socket option.\n        ///\n        /// # Typical errors\n        /// - `invalid-argument`:     (set) The provided value was 0.\n        keep-alive-interval: func() -> result<duration, error-code>;\n        set-keep-alive-interval: func(value: duration) -> result<_, error-code>;\n\n        /// The maximum amount of keepalive packets TCP should send before aborting the connection.\n        ///\n        /// If the provided value is 0, an `invalid-argument` error is returned.\n        /// Any other value will never cause an error, but it might be silently clamped and/or rounded.\n        /// I.e. after setting a value, reading the same setting back may return a different value.\n        ///\n        /// Equivalent to the TCP_KEEPCNT socket option.\n        ///\n        /// # Typical errors\n        /// - `invalid-argument`:     (set) The provided value was 0.\n        keep-alive-count: func() -> result<u32, error-code>;\n        set-keep-alive-count: func(value: u32) -> result<_, error-code>;\n\n        /// Equivalent to the IP_TTL & IPV6_UNICAST_HOPS socket options.\n        ///\n        /// If the provided value is 0, an `invalid-argument` error is returned.\n        ///\n        /// # Typical errors\n        /// - `invalid-argument`:     (set) The TTL value must be 1 or higher.\n        /// - `invalid-state`:        (set) The socket is already in the Connection state.\n        /// - `invalid-state`:        (set) The socket is already in the Listener state.\n        hop-limit: func() -> result<u8, error-code>;\n        set-hop-limit: func(value: u8) -> result<_, error-code>;\n\n        /// The kernel buffer space reserved for sends/receives on this socket.\n        ///\n        /// If the provided value is 0, an `invalid-argument` error is returned.\n        /// Any other value will never cause an error, but it might be silently clamped and/or rounded.\n        /// I.e. after setting a value, reading the same setting back may return a different value.\n        ///\n        /// Equivalent to the SO_RCVBUF and SO_SNDBUF socket options.\n        ///\n        /// # Typical errors\n        /// - `invalid-argument`:     (set) The provided value was 0.\n        /// - `invalid-state`:        (set) The socket is already in the Connection state.\n        /// - `invalid-state`:        (set) The socket is already in the Listener state.\n        receive-buffer-size: func() -> result<u64, error-code>;\n        set-receive-buffer-size: func(value: u64) -> result<_, error-code>;\n        send-buffer-size: func() -> result<u64, error-code>;\n        set-send-buffer-size: func(value: u64) -> result<_, error-code>;\n\n        /// Create a `pollable` which will resolve once the socket is ready for I/O.\n        ///\n        /// Note: this function is here for WASI Preview2 only.\n        /// It\'s planned to be removed when `future` is natively supported in Preview3.\n        subscribe: func() -> pollable;\n\n        /// Initiate a graceful shutdown.\n        ///\n        /// - `receive`: The socket is not expecting to receive any data from\n        ///   the peer. The `input-stream` associated with this socket will be\n        ///   closed. Any data still in the receive queue at time of calling\n        ///   this method will be discarded.\n        /// - `send`: The socket has no more data to send to the peer. The `output-stream`\n        ///   associated with this socket will be closed and a FIN packet will be sent.\n        /// - `both`: Same effect as `receive` & `send` combined.\n        ///\n        /// This function is idempotent. Shutting a down a direction more than once\n        /// has no effect and returns `ok`.\n        ///\n        /// The shutdown function does not close (drop) the socket.\n        ///\n        /// # Typical errors\n        /// - `invalid-state`: The socket is not in the Connection state. (ENOTCONN)\n        ///\n        /// # References\n        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/shutdown.html>\n        /// - <https://man7.org/linux/man-pages/man2/shutdown.2.html>\n        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-shutdown>\n        /// - <https://man.freebsd.org/cgi/man.cgi?query=shutdown&sektion=2>\n        shutdown: func(shutdown-type: shutdown-type) -> result<_, error-code>;\n    }\n}\n";
        const _: &[u8] = b"\ninterface network {\n    /// An opaque resource that represents access to (a subset of) the network.\n    /// This enables context-based security for networking.\n    /// There is no need for this to map 1:1 to a physical network interface.\n    resource network;\n\n    /// Error codes.\n    ///\n    /// In theory, every API can return any error code.\n    /// In practice, API\'s typically only return the errors documented per API\n    /// combined with a couple of errors that are always possible:\n    /// - `unknown`\n    /// - `access-denied`\n    /// - `not-supported`\n    /// - `out-of-memory`\n    /// - `concurrency-conflict`\n    ///\n    /// See each individual API for what the POSIX equivalents are. They sometimes differ per API.\n    enum error-code {\n        /// Unknown error\n        unknown,\n\n        /// Access denied.\n        ///\n        /// POSIX equivalent: EACCES, EPERM\n        access-denied,\n\n        /// The operation is not supported.\n        ///\n        /// POSIX equivalent: EOPNOTSUPP\n        not-supported,\n\n        /// One of the arguments is invalid.\n        ///\n        /// POSIX equivalent: EINVAL\n        invalid-argument,\n\n        /// Not enough memory to complete the operation.\n        ///\n        /// POSIX equivalent: ENOMEM, ENOBUFS, EAI_MEMORY\n        out-of-memory,\n\n        /// The operation timed out before it could finish completely.\n        timeout,\n\n        /// This operation is incompatible with another asynchronous operation that is already in progress.\n        ///\n        /// POSIX equivalent: EALREADY\n        concurrency-conflict,\n\n        /// Trying to finish an asynchronous operation that:\n        /// - has not been started yet, or:\n        /// - was already finished by a previous `finish-*` call.\n        ///\n        /// Note: this is scheduled to be removed when `future`s are natively supported.\n        not-in-progress,\n\n        /// The operation has been aborted because it could not be completed immediately.\n        ///\n        /// Note: this is scheduled to be removed when `future`s are natively supported.\n        would-block,\n\n\n        /// The operation is not valid in the socket\'s current state.\n        invalid-state,\n\n        /// A new socket resource could not be created because of a system limit.\n        new-socket-limit,\n\n        /// A bind operation failed because the provided address is not an address that the `network` can bind to.\n        address-not-bindable,\n\n        /// A bind operation failed because the provided address is already in use or because there are no ephemeral ports available.\n        address-in-use,\n\n        /// The remote address is not reachable\n        remote-unreachable,\n\n\n        /// The TCP connection was forcefully rejected\n        connection-refused,\n\n        /// The TCP connection was reset.\n        connection-reset,\n\n        /// A TCP connection was aborted.\n        connection-aborted,\n\n\n        /// The size of a datagram sent to a UDP socket exceeded the maximum\n        /// supported size.\n        datagram-too-large,\n\n\n        /// Name does not exist or has no suitable associated IP addresses.\n        name-unresolvable,\n\n        /// A temporary failure in name resolution occurred.\n        temporary-resolver-failure,\n\n        /// A permanent failure in name resolution occurred.\n        permanent-resolver-failure,\n    }\n\n    enum ip-address-family {\n        /// Similar to `AF_INET` in POSIX.\n        ipv4,\n\n        /// Similar to `AF_INET6` in POSIX.\n        ipv6,\n    }\n\n    type ipv4-address = tuple<u8, u8, u8, u8>;\n    type ipv6-address = tuple<u16, u16, u16, u16, u16, u16, u16, u16>;\n\n    variant ip-address {\n        ipv4(ipv4-address),\n        ipv6(ipv6-address),\n    }\n\n    record ipv4-socket-address {\n        /// sin_port\n        port: u16,\n        /// sin_addr\n        address: ipv4-address,\n    }\n\n    record ipv6-socket-address {\n        /// sin6_port\n        port: u16,\n        /// sin6_flowinfo\n        flow-info: u32,\n        /// sin6_addr\n        address: ipv6-address,\n        /// sin6_scope_id\n        scope-id: u32,\n    }\n\n    variant ip-socket-address {\n        ipv4(ipv4-socket-address),\n        ipv6(ipv6-socket-address),\n    }\n\n}\n";
        const _: &[u8] = b"package wasi:sockets@0.2.0;\n\nworld imports {\n    import instance-network;\n    import network;\n    import udp;\n    import udp-create-socket;\n    import tcp;\n    import tcp-create-socket;\n    import ip-name-lookup;\n}\n";
        const _: &[u8] = b"\ninterface tcp-create-socket {\n    use network.{network, error-code, ip-address-family};\n    use tcp.{tcp-socket};\n\n    /// Create a new TCP socket.\n    ///\n    /// Similar to `socket(AF_INET or AF_INET6, SOCK_STREAM, IPPROTO_TCP)` in POSIX.\n    /// On IPv6 sockets, IPV6_V6ONLY is enabled by default and can\'t be configured otherwise.\n    ///\n    /// This function does not require a network capability handle. This is considered to be safe because\n    /// at time of creation, the socket is not bound to any `network` yet. Up to the moment `bind`/`connect`\n    /// is called, the socket is effectively an in-memory configuration object, unable to communicate with the outside world.\n    ///\n    /// All sockets are non-blocking. Use the wasi-poll interface to block on asynchronous operations.\n    ///\n    /// # Typical errors\n    /// - `not-supported`:     The specified `address-family` is not supported. (EAFNOSUPPORT)\n    /// - `new-socket-limit`:  The new socket resource could not be created because of a system limit. (EMFILE, ENFILE)\n    ///\n    /// # References\n    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/socket.html>\n    /// - <https://man7.org/linux/man-pages/man2/socket.2.html>\n    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-wsasocketw>\n    /// - <https://man.freebsd.org/cgi/man.cgi?query=socket&sektion=2>\n    create-tcp-socket: func(address-family: ip-address-family) -> result<tcp-socket, error-code>;\n}\n";
        const _: &[u8] = b"\ninterface udp-create-socket {\n    use network.{network, error-code, ip-address-family};\n    use udp.{udp-socket};\n\n    /// Create a new UDP socket.\n    ///\n    /// Similar to `socket(AF_INET or AF_INET6, SOCK_DGRAM, IPPROTO_UDP)` in POSIX.\n    /// On IPv6 sockets, IPV6_V6ONLY is enabled by default and can\'t be configured otherwise.\n    ///\n    /// This function does not require a network capability handle. This is considered to be safe because\n    /// at time of creation, the socket is not bound to any `network` yet. Up to the moment `bind` is called,\n    /// the socket is effectively an in-memory configuration object, unable to communicate with the outside world.\n    ///\n    /// All sockets are non-blocking. Use the wasi-poll interface to block on asynchronous operations.\n    ///\n    /// # Typical errors\n    /// - `not-supported`:     The specified `address-family` is not supported. (EAFNOSUPPORT)\n    /// - `new-socket-limit`:  The new socket resource could not be created because of a system limit. (EMFILE, ENFILE)\n    ///\n    /// # References:\n    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/socket.html>\n    /// - <https://man7.org/linux/man-pages/man2/socket.2.html>\n    /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-wsasocketw>\n    /// - <https://man.freebsd.org/cgi/man.cgi?query=socket&sektion=2>\n    create-udp-socket: func(address-family: ip-address-family) -> result<udp-socket, error-code>;\n}\n";
        const _: &[u8] = b"\n/// This interface provides a value-export of the default network handle..\ninterface instance-network {\n    use network.{network};\n\n    /// Get a handle to the default network.\n    instance-network: func() -> network;\n\n}\n";
        const _: &[u8] = b"\ninterface udp {\n    use wasi:io/poll@0.2.0.{pollable};\n    use network.{network, error-code, ip-socket-address, ip-address-family};\n\n    /// A received datagram.\n    record incoming-datagram {\n        /// The payload.\n        /// \n        /// Theoretical max size: ~64 KiB. In practice, typically less than 1500 bytes.\n        data: list<u8>,\n\n        /// The source address.\n        ///\n        /// This field is guaranteed to match the remote address the stream was initialized with, if any.\n        ///\n        /// Equivalent to the `src_addr` out parameter of `recvfrom`.\n        remote-address: ip-socket-address,\n    }\n\n    /// A datagram to be sent out.\n    record outgoing-datagram {\n        /// The payload.\n        data: list<u8>,\n\n        /// The destination address.\n        ///\n        /// The requirements on this field depend on how the stream was initialized:\n        /// - with a remote address: this field must be None or match the stream\'s remote address exactly.\n        /// - without a remote address: this field is required.\n        ///\n        /// If this value is None, the send operation is equivalent to `send` in POSIX. Otherwise it is equivalent to `sendto`.\n        remote-address: option<ip-socket-address>,\n    }\n\n\n\n    /// A UDP socket handle.\n    resource udp-socket {\n        /// Bind the socket to a specific network on the provided IP address and port.\n        ///\n        /// If the IP address is zero (`0.0.0.0` in IPv4, `::` in IPv6), it is left to the implementation to decide which\n        /// network interface(s) to bind to.\n        /// If the port is zero, the socket will be bound to a random free port.\n        ///\n        /// Unlike in POSIX, this function is async. This enables interactive WASI hosts to inject permission prompts.\n        ///\n        /// # Typical `start` errors\n        /// - `invalid-argument`:          The `local-address` has the wrong address family. (EAFNOSUPPORT, EFAULT on Windows)\n        /// - `invalid-state`:             The socket is already bound. (EINVAL)\n        ///\n        /// # Typical `finish` errors\n        /// - `address-in-use`:            No ephemeral ports available. (EADDRINUSE, ENOBUFS on Windows)\n        /// - `address-in-use`:            Address is already in use. (EADDRINUSE)\n        /// - `address-not-bindable`:      `local-address` is not an address that the `network` can bind to. (EADDRNOTAVAIL)\n        /// - `not-in-progress`:           A `bind` operation is not in progress.\n        /// - `would-block`:               Can\'t finish the operation, it is still in progress. (EWOULDBLOCK, EAGAIN)\n        ///\n        /// # References\n        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/bind.html>\n        /// - <https://man7.org/linux/man-pages/man2/bind.2.html>\n        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-bind>\n        /// - <https://man.freebsd.org/cgi/man.cgi?query=bind&sektion=2&format=html>\n        start-bind: func(network: borrow<network>, local-address: ip-socket-address) -> result<_, error-code>;\n        finish-bind: func() -> result<_, error-code>;\n\n        /// Set up inbound & outbound communication channels, optionally to a specific peer.\n        ///\n        /// This function only changes the local socket configuration and does not generate any network traffic.\n        /// On success, the `remote-address` of the socket is updated. The `local-address` may be updated as well,\n        /// based on the best network path to `remote-address`.\n        ///\n        /// When a `remote-address` is provided, the returned streams are limited to communicating with that specific peer:\n        /// - `send` can only be used to send to this destination.\n        /// - `receive` will only return datagrams sent from the provided `remote-address`.\n        ///\n        /// This method may be called multiple times on the same socket to change its association, but\n        /// only the most recently returned pair of streams will be operational. Implementations may trap if\n        /// the streams returned by a previous invocation haven\'t been dropped yet before calling `stream` again.\n        /// \n        /// The POSIX equivalent in pseudo-code is:\n        /// ```text\n        /// if (was previously connected) {\n        /// \tconnect(s, AF_UNSPEC)\n        /// }\n        /// if (remote_address is Some) {\n        /// \tconnect(s, remote_address)\n        /// }\n        /// ```\n        ///\n        /// Unlike in POSIX, the socket must already be explicitly bound.\n        /// \n        /// # Typical errors\n        /// - `invalid-argument`:          The `remote-address` has the wrong address family. (EAFNOSUPPORT)\n        /// - `invalid-argument`:          The IP address in `remote-address` is set to INADDR_ANY (`0.0.0.0` / `::`). (EDESTADDRREQ, EADDRNOTAVAIL)\n        /// - `invalid-argument`:          The port in `remote-address` is set to 0. (EDESTADDRREQ, EADDRNOTAVAIL)\n        /// - `invalid-state`:             The socket is not bound.\n        /// - `address-in-use`:            Tried to perform an implicit bind, but there were no ephemeral ports available. (EADDRINUSE, EADDRNOTAVAIL on Linux, EAGAIN on BSD)\n        /// - `remote-unreachable`:        The remote address is not reachable. (ECONNRESET, ENETRESET, EHOSTUNREACH, EHOSTDOWN, ENETUNREACH, ENETDOWN, ENONET)\n        /// - `connection-refused`:        The connection was refused. (ECONNREFUSED)\n        ///\n        /// # References\n        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/connect.html>\n        /// - <https://man7.org/linux/man-pages/man2/connect.2.html>\n        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-connect>\n        /// - <https://man.freebsd.org/cgi/man.cgi?connect>\n        %stream: func(remote-address: option<ip-socket-address>) -> result<tuple<incoming-datagram-stream, outgoing-datagram-stream>, error-code>;\n\n        /// Get the current bound address.\n        ///\n        /// POSIX mentions:\n        /// > If the socket has not been bound to a local name, the value\n        /// > stored in the object pointed to by `address` is unspecified.\n        ///\n        /// WASI is stricter and requires `local-address` to return `invalid-state` when the socket hasn\'t been bound yet.\n        /// \n        /// # Typical errors\n        /// - `invalid-state`: The socket is not bound to any local address.\n        ///\n        /// # References\n        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getsockname.html>\n        /// - <https://man7.org/linux/man-pages/man2/getsockname.2.html>\n        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-getsockname>\n        /// - <https://man.freebsd.org/cgi/man.cgi?getsockname>\n        local-address: func() -> result<ip-socket-address, error-code>;\n\n        /// Get the address the socket is currently streaming to.\n        ///\n        /// # Typical errors\n        /// - `invalid-state`: The socket is not streaming to a specific remote address. (ENOTCONN)\n        ///\n        /// # References\n        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getpeername.html>\n        /// - <https://man7.org/linux/man-pages/man2/getpeername.2.html>\n        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-getpeername>\n        /// - <https://man.freebsd.org/cgi/man.cgi?query=getpeername&sektion=2&n=1>\n        remote-address: func() -> result<ip-socket-address, error-code>;\n\n        /// Whether this is a IPv4 or IPv6 socket.\n        ///\n        /// Equivalent to the SO_DOMAIN socket option.\n        address-family: func() -> ip-address-family;\n\n        /// Equivalent to the IP_TTL & IPV6_UNICAST_HOPS socket options.\n        ///\n        /// If the provided value is 0, an `invalid-argument` error is returned.\n        ///\n        /// # Typical errors\n        /// - `invalid-argument`:     (set) The TTL value must be 1 or higher.\n        unicast-hop-limit: func() -> result<u8, error-code>;\n        set-unicast-hop-limit: func(value: u8) -> result<_, error-code>;\n\n        /// The kernel buffer space reserved for sends/receives on this socket.\n        ///\n        /// If the provided value is 0, an `invalid-argument` error is returned.\n        /// Any other value will never cause an error, but it might be silently clamped and/or rounded.\n        /// I.e. after setting a value, reading the same setting back may return a different value.\n        ///\n        /// Equivalent to the SO_RCVBUF and SO_SNDBUF socket options.\n        ///\n        /// # Typical errors\n        /// - `invalid-argument`:     (set) The provided value was 0.\n        receive-buffer-size: func() -> result<u64, error-code>;\n        set-receive-buffer-size: func(value: u64) -> result<_, error-code>;\n        send-buffer-size: func() -> result<u64, error-code>;\n        set-send-buffer-size: func(value: u64) -> result<_, error-code>;\n\n        /// Create a `pollable` which will resolve once the socket is ready for I/O.\n        ///\n        /// Note: this function is here for WASI Preview2 only.\n        /// It\'s planned to be removed when `future` is natively supported in Preview3.\n        subscribe: func() -> pollable;\n    }\n\n    resource incoming-datagram-stream {\n        /// Receive messages on the socket.\n        ///\n        /// This function attempts to receive up to `max-results` datagrams on the socket without blocking.\n        /// The returned list may contain fewer elements than requested, but never more.\n        ///\n        /// This function returns successfully with an empty list when either:\n        /// - `max-results` is 0, or:\n        /// - `max-results` is greater than 0, but no results are immediately available.\n        /// This function never returns `error(would-block)`.\n        ///\n        /// # Typical errors\n        /// - `remote-unreachable`: The remote address is not reachable. (ECONNRESET, ENETRESET on Windows, EHOSTUNREACH, EHOSTDOWN, ENETUNREACH, ENETDOWN, ENONET)\n        /// - `connection-refused`: The connection was refused. (ECONNREFUSED)\n        ///\n        /// # References\n        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/recvfrom.html>\n        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/recvmsg.html>\n        /// - <https://man7.org/linux/man-pages/man2/recv.2.html>\n        /// - <https://man7.org/linux/man-pages/man2/recvmmsg.2.html>\n        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-recv>\n        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-recvfrom>\n        /// - <https://learn.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms741687(v=vs.85)>\n        /// - <https://man.freebsd.org/cgi/man.cgi?query=recv&sektion=2>\n        receive: func(max-results: u64) -> result<list<incoming-datagram>, error-code>;\n\n        /// Create a `pollable` which will resolve once the stream is ready to receive again.\n        ///\n        /// Note: this function is here for WASI Preview2 only.\n        /// It\'s planned to be removed when `future` is natively supported in Preview3.\n        subscribe: func() -> pollable;\n    }\n\n    resource outgoing-datagram-stream {\n        /// Check readiness for sending. This function never blocks.\n        ///\n        /// Returns the number of datagrams permitted for the next call to `send`,\n        /// or an error. Calling `send` with more datagrams than this function has\n        /// permitted will trap.\n        ///\n        /// When this function returns ok(0), the `subscribe` pollable will\n        /// become ready when this function will report at least ok(1), or an\n        /// error.\n        /// \n        /// Never returns `would-block`.\n        check-send: func() -> result<u64, error-code>;\n\n        /// Send messages on the socket.\n        ///\n        /// This function attempts to send all provided `datagrams` on the socket without blocking and\n        /// returns how many messages were actually sent (or queued for sending). This function never\n        /// returns `error(would-block)`. If none of the datagrams were able to be sent, `ok(0)` is returned.\n        ///\n        /// This function semantically behaves the same as iterating the `datagrams` list and sequentially\n        /// sending each individual datagram until either the end of the list has been reached or the first error occurred.\n        /// If at least one datagram has been sent successfully, this function never returns an error.\n        ///\n        /// If the input list is empty, the function returns `ok(0)`.\n        ///\n        /// Each call to `send` must be permitted by a preceding `check-send`. Implementations must trap if\n        /// either `check-send` was not called or `datagrams` contains more items than `check-send` permitted.\n        ///\n        /// # Typical errors\n        /// - `invalid-argument`:        The `remote-address` has the wrong address family. (EAFNOSUPPORT)\n        /// - `invalid-argument`:        The IP address in `remote-address` is set to INADDR_ANY (`0.0.0.0` / `::`). (EDESTADDRREQ, EADDRNOTAVAIL)\n        /// - `invalid-argument`:        The port in `remote-address` is set to 0. (EDESTADDRREQ, EADDRNOTAVAIL)\n        /// - `invalid-argument`:        The socket is in \"connected\" mode and `remote-address` is `some` value that does not match the address passed to `stream`. (EISCONN)\n        /// - `invalid-argument`:        The socket is not \"connected\" and no value for `remote-address` was provided. (EDESTADDRREQ)\n        /// - `remote-unreachable`:      The remote address is not reachable. (ECONNRESET, ENETRESET on Windows, EHOSTUNREACH, EHOSTDOWN, ENETUNREACH, ENETDOWN, ENONET)\n        /// - `connection-refused`:      The connection was refused. (ECONNREFUSED)\n        /// - `datagram-too-large`:      The datagram is too large. (EMSGSIZE)\n        ///\n        /// # References\n        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/sendto.html>\n        /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/sendmsg.html>\n        /// - <https://man7.org/linux/man-pages/man2/send.2.html>\n        /// - <https://man7.org/linux/man-pages/man2/sendmmsg.2.html>\n        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-send>\n        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendto>\n        /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-wsasendmsg>\n        /// - <https://man.freebsd.org/cgi/man.cgi?query=send&sektion=2>\n        send: func(datagrams: list<outgoing-datagram>) -> result<u64, error-code>;\n        \n        /// Create a `pollable` which will resolve once the stream is ready to send again.\n        ///\n        /// Note: this function is here for WASI Preview2 only.\n        /// It\'s planned to be removed when `future` is natively supported in Preview3.\n        subscribe: func() -> pollable;\n    }\n}\n";
        const _: &[u8] = b"package wasi:random@0.2.0;\n\nworld imports {\n    import random;\n    import insecure;\n    import insecure-seed;\n}\n";
        const _: &[u8] = b"package wasi:random@0.2.0;\n/// WASI Random is a random data API.\n///\n/// It is intended to be portable at least between Unix-family platforms and\n/// Windows.\ninterface random {\n    /// Return `len` cryptographically-secure random or pseudo-random bytes.\n    ///\n    /// This function must produce data at least as cryptographically secure and\n    /// fast as an adequately seeded cryptographically-secure pseudo-random\n    /// number generator (CSPRNG). It must not block, from the perspective of\n    /// the calling program, under any circumstances, including on the first\n    /// request and on requests for numbers of bytes. The returned data must\n    /// always be unpredictable.\n    ///\n    /// This function must always return fresh data. Deterministic environments\n    /// must omit this function, rather than implementing it with deterministic\n    /// data.\n    get-random-bytes: func(len: u64) -> list<u8>;\n\n    /// Return a cryptographically-secure random or pseudo-random `u64` value.\n    ///\n    /// This function returns the same type of data as `get-random-bytes`,\n    /// represented as a `u64`.\n    get-random-u64: func() -> u64;\n}\n";
        const _: &[u8] = b"package wasi:random@0.2.0;\n/// The insecure interface for insecure pseudo-random numbers.\n///\n/// It is intended to be portable at least between Unix-family platforms and\n/// Windows.\ninterface insecure {\n    /// Return `len` insecure pseudo-random bytes.\n    ///\n    /// This function is not cryptographically secure. Do not use it for\n    /// anything related to security.\n    ///\n    /// There are no requirements on the values of the returned bytes, however\n    /// implementations are encouraged to return evenly distributed values with\n    /// a long period.\n    get-insecure-random-bytes: func(len: u64) -> list<u8>;\n\n    /// Return an insecure pseudo-random `u64` value.\n    ///\n    /// This function returns the same type of pseudo-random data as\n    /// `get-insecure-random-bytes`, represented as a `u64`.\n    get-insecure-random-u64: func() -> u64;\n}\n";
        const _: &[u8] = b"package wasi:random@0.2.0;\n/// The insecure-seed interface for seeding hash-map DoS resistance.\n///\n/// It is intended to be portable at least between Unix-family platforms and\n/// Windows.\ninterface insecure-seed {\n    /// Return a 128-bit value that may contain a pseudo-random value.\n    ///\n    /// The returned value is not required to be computed from a CSPRNG, and may\n    /// even be entirely deterministic. Host implementations are encouraged to\n    /// provide pseudo-random values to any program exposed to\n    /// attacker-controlled content, to enable DoS protection built into many\n    /// languages\' hash-map implementations.\n    ///\n    /// This function is intended to only be called once, by a source language\n    /// to initialize Denial Of Service (DoS) protection in its hash-map\n    /// implementation.\n    ///\n    /// # Expected future evolution\n    ///\n    /// This will likely be changed to a value import, to prevent it from being\n    /// called multiple times and potentially used for purposes other than DoS\n    /// protection.\n    insecure-seed: func() -> tuple<u64, u64>;\n}\n";
        const _: &[u8] = b"interface environment {\n  /// Get the POSIX-style environment variables.\n  ///\n  /// Each environment variable is provided as a pair of string variable names\n  /// and string value.\n  ///\n  /// Morally, these are a value import, but until value imports are available\n  /// in the component model, this import function should return the same\n  /// values each time it is called.\n  get-environment: func() -> list<tuple<string, string>>;\n\n  /// Get the POSIX-style arguments to the program.\n  get-arguments: func() -> list<string>;\n\n  /// Return a path that programs should use as their initial current working\n  /// directory, interpreting `.` as shorthand for this.\n  initial-cwd: func() -> option<string>;\n}\n";
        const _: &[u8] = b"package wasi:cli@0.2.0;\n\nworld imports {\n  include wasi:clocks/imports@0.2.0;\n  include wasi:filesystem/imports@0.2.0;\n  include wasi:sockets/imports@0.2.0;\n  include wasi:random/imports@0.2.0;\n  include wasi:io/imports@0.2.0;\n\n  import environment;\n  import exit;\n  import stdin;\n  import stdout;\n  import stderr;\n  import terminal-input;\n  import terminal-output;\n  import terminal-stdin;\n  import terminal-stdout;\n  import terminal-stderr;\n}\n";
        const _: &[u8] = b"interface stdin {\n  use wasi:io/streams@0.2.0.{input-stream};\n\n  get-stdin: func() -> input-stream;\n}\n\ninterface stdout {\n  use wasi:io/streams@0.2.0.{output-stream};\n\n  get-stdout: func() -> output-stream;\n}\n\ninterface stderr {\n  use wasi:io/streams@0.2.0.{output-stream};\n\n  get-stderr: func() -> output-stream;\n}\n";
        const _: &[u8] = b"interface run {\n  /// Run the program.\n  run: func() -> result;\n}\n";
        const _: &[u8] = b"interface exit {\n  /// Exit the current instance and any linked instances.\n  exit: func(status: result);\n}\n";
        const _: &[u8] = b"package wasi:cli@0.2.0;\n\nworld command {\n  include imports;\n\n  export run;\n}\n";
        const _: &[u8] = b"/// Terminal input.\n///\n/// In the future, this may include functions for disabling echoing,\n/// disabling input buffering so that keyboard events are sent through\n/// immediately, querying supported features, and so on.\ninterface terminal-input {\n    /// The input side of a terminal.\n    resource terminal-input;\n}\n\n/// Terminal output.\n///\n/// In the future, this may include functions for querying the terminal\n/// size, being notified of terminal size changes, querying supported\n/// features, and so on.\ninterface terminal-output {\n    /// The output side of a terminal.\n    resource terminal-output;\n}\n\n/// An interface providing an optional `terminal-input` for stdin as a\n/// link-time authority.\ninterface terminal-stdin {\n    use terminal-input.{terminal-input};\n\n    /// If stdin is connected to a terminal, return a `terminal-input` handle\n    /// allowing further interaction with it.\n    get-terminal-stdin: func() -> option<terminal-input>;\n}\n\n/// An interface providing an optional `terminal-output` for stdout as a\n/// link-time authority.\ninterface terminal-stdout {\n    use terminal-output.{terminal-output};\n\n    /// If stdout is connected to a terminal, return a `terminal-output` handle\n    /// allowing further interaction with it.\n    get-terminal-stdout: func() -> option<terminal-output>;\n}\n\n/// An interface providing an optional `terminal-output` for stderr as a\n/// link-time authority.\ninterface terminal-stderr {\n    use terminal-output.{terminal-output};\n\n    /// If stderr is connected to a terminal, return a `terminal-output` handle\n    /// allowing further interaction with it.\n    get-terminal-stderr: func() -> option<terminal-output>;\n}\n";
        const _: &[u8] = b"package wasi:http@0.2.0;\n\n/// The `wasi:http/proxy` world captures a widely-implementable intersection of\n/// hosts that includes HTTP forward and reverse proxies. Components targeting\n/// this world may concurrently stream in and out any number of incoming and\n/// outgoing HTTP requests.\nworld proxy {\n  /// HTTP proxies have access to time and randomness.\n  include wasi:clocks/imports@0.2.0;\n  import wasi:random/random@0.2.0;\n\n  /// Proxies have standard output and error streams which are expected to\n  /// terminate in a developer-facing console provided by the host.\n  import wasi:cli/stdout@0.2.0;\n  import wasi:cli/stderr@0.2.0;\n\n  /// TODO: this is a temporary workaround until component tooling is able to\n  /// gracefully handle the absence of stdin. Hosts must return an eof stream\n  /// for this import, which is what wasi-libc + tooling will do automatically\n  /// when this import is properly removed.\n  import wasi:cli/stdin@0.2.0;\n\n  /// This is the default handler to use when user code simply wants to make an\n  /// HTTP request (e.g., via `fetch()`).\n  import outgoing-handler;\n\n  /// The host delivers incoming HTTP requests to a component by calling the\n  /// `handle` function of this exported interface. A host may arbitrarily reuse\n  /// or not reuse component instance when delivering incoming HTTP requests and\n  /// thus a component must be able to handle 0..N calls to `handle`.\n  export incoming-handler;\n}\n";
        const _: &[u8] = b"/// This interface defines all of the types and methods for implementing\n/// HTTP Requests and Responses, both incoming and outgoing, as well as\n/// their headers, trailers, and bodies.\ninterface types {\n  use wasi:clocks/monotonic-clock@0.2.0.{duration};\n  use wasi:io/streams@0.2.0.{input-stream, output-stream};\n  use wasi:io/error@0.2.0.{error as io-error};\n  use wasi:io/poll@0.2.0.{pollable};\n\n  /// This type corresponds to HTTP standard Methods.\n  variant method {\n    get,\n    head,\n    post,\n    put,\n    delete,\n    connect,\n    options,\n    trace,\n    patch,\n    other(string)\n  }\n\n  /// This type corresponds to HTTP standard Related Schemes.\n  variant scheme {\n    HTTP,\n    HTTPS,\n    other(string)\n  }\n\n  /// These cases are inspired by the IANA HTTP Proxy Error Types:\n  ///   https://www.iana.org/assignments/http-proxy-status/http-proxy-status.xhtml#table-http-proxy-error-types\n  variant error-code {\n    DNS-timeout,\n    DNS-error(DNS-error-payload),\n    destination-not-found,\n    destination-unavailable,\n    destination-IP-prohibited,\n    destination-IP-unroutable,\n    connection-refused,\n    connection-terminated,\n    connection-timeout,\n    connection-read-timeout,\n    connection-write-timeout,\n    connection-limit-reached,\n    TLS-protocol-error,\n    TLS-certificate-error,\n    TLS-alert-received(TLS-alert-received-payload),\n    HTTP-request-denied,\n    HTTP-request-length-required,\n    HTTP-request-body-size(option<u64>),\n    HTTP-request-method-invalid,\n    HTTP-request-URI-invalid,\n    HTTP-request-URI-too-long,\n    HTTP-request-header-section-size(option<u32>),\n    HTTP-request-header-size(option<field-size-payload>),\n    HTTP-request-trailer-section-size(option<u32>),\n    HTTP-request-trailer-size(field-size-payload),\n    HTTP-response-incomplete,\n    HTTP-response-header-section-size(option<u32>),\n    HTTP-response-header-size(field-size-payload),\n    HTTP-response-body-size(option<u64>),\n    HTTP-response-trailer-section-size(option<u32>),\n    HTTP-response-trailer-size(field-size-payload),\n    HTTP-response-transfer-coding(option<string>),\n    HTTP-response-content-coding(option<string>),\n    HTTP-response-timeout,\n    HTTP-upgrade-failed,\n    HTTP-protocol-error,\n    loop-detected,\n    configuration-error,\n    /// This is a catch-all error for anything that doesn\'t fit cleanly into a\n    /// more specific case. It also includes an optional string for an\n    /// unstructured description of the error. Users should not depend on the\n    /// string for diagnosing errors, as it\'s not required to be consistent\n    /// between implementations.\n    internal-error(option<string>)\n  }\n\n  /// Defines the case payload type for `DNS-error` above:\n  record DNS-error-payload {\n    rcode: option<string>,\n    info-code: option<u16>\n  }\n\n  /// Defines the case payload type for `TLS-alert-received` above:\n  record TLS-alert-received-payload {\n    alert-id: option<u8>,\n    alert-message: option<string>\n  }\n\n  /// Defines the case payload type for `HTTP-response-{header,trailer}-size` above:\n  record field-size-payload {\n    field-name: option<string>,\n    field-size: option<u32>\n  }\n\n  /// Attempts to extract a http-related `error` from the wasi:io `error`\n  /// provided.\n  ///\n  /// Stream operations which return\n  /// `wasi:io/stream/stream-error::last-operation-failed` have a payload of\n  /// type `wasi:io/error/error` with more information about the operation\n  /// that failed. This payload can be passed through to this function to see\n  /// if there\'s http-related information about the error to return.\n  ///\n  /// Note that this function is fallible because not all io-errors are\n  /// http-related errors.\n  http-error-code: func(err: borrow<io-error>) -> option<error-code>;\n\n  /// This type enumerates the different kinds of errors that may occur when\n  /// setting or appending to a `fields` resource.\n  variant header-error {\n    /// This error indicates that a `field-key` or `field-value` was\n    /// syntactically invalid when used with an operation that sets headers in a\n    /// `fields`.\n    invalid-syntax,\n\n    /// This error indicates that a forbidden `field-key` was used when trying\n    /// to set a header in a `fields`.\n    forbidden,\n\n    /// This error indicates that the operation on the `fields` was not\n    /// permitted because the fields are immutable.\n    immutable,\n  }\n\n  /// Field keys are always strings.\n  type field-key = string;\n\n  /// Field values should always be ASCII strings. However, in\n  /// reality, HTTP implementations often have to interpret malformed values,\n  /// so they are provided as a list of bytes.\n  type field-value = list<u8>;\n\n  /// This following block defines the `fields` resource which corresponds to\n  /// HTTP standard Fields. Fields are a common representation used for both\n  /// Headers and Trailers.\n  ///\n  /// A `fields` may be mutable or immutable. A `fields` created using the\n  /// constructor, `from-list`, or `clone` will be mutable, but a `fields`\n  /// resource given by other means (including, but not limited to,\n  /// `incoming-request.headers`, `outgoing-request.headers`) might be be\n  /// immutable. In an immutable fields, the `set`, `append`, and `delete`\n  /// operations will fail with `header-error.immutable`.\n  resource fields {\n\n    /// Construct an empty HTTP Fields.\n    ///\n    /// The resulting `fields` is mutable.\n    constructor();\n\n    /// Construct an HTTP Fields.\n    ///\n    /// The resulting `fields` is mutable.\n    ///\n    /// The list represents each key-value pair in the Fields. Keys\n    /// which have multiple values are represented by multiple entries in this\n    /// list with the same key.\n    ///\n    /// The tuple is a pair of the field key, represented as a string, and\n    /// Value, represented as a list of bytes. In a valid Fields, all keys\n    /// and values are valid UTF-8 strings. However, values are not always\n    /// well-formed, so they are represented as a raw list of bytes.\n    ///\n    /// An error result will be returned if any header or value was\n    /// syntactically invalid, or if a header was forbidden.\n    from-list: static func(\n      entries: list<tuple<field-key,field-value>>\n    ) -> result<fields, header-error>;\n\n    /// Get all of the values corresponding to a key. If the key is not present\n    /// in this `fields`, an empty list is returned. However, if the key is\n    /// present but empty, this is represented by a list with one or more\n    /// empty field-values present.\n    get: func(name: field-key) -> list<field-value>;\n\n    /// Returns `true` when the key is present in this `fields`. If the key is\n    /// syntactically invalid, `false` is returned.\n    has: func(name: field-key) -> bool;\n\n    /// Set all of the values for a key. Clears any existing values for that\n    /// key, if they have been set.\n    ///\n    /// Fails with `header-error.immutable` if the `fields` are immutable.\n    set: func(name: field-key, value: list<field-value>) -> result<_, header-error>;\n\n    /// Delete all values for a key. Does nothing if no values for the key\n    /// exist.\n    ///\n    /// Fails with `header-error.immutable` if the `fields` are immutable.\n    delete: func(name: field-key) -> result<_, header-error>;\n\n    /// Append a value for a key. Does not change or delete any existing\n    /// values for that key.\n    ///\n    /// Fails with `header-error.immutable` if the `fields` are immutable.\n    append: func(name: field-key, value: field-value) -> result<_, header-error>;\n\n    /// Retrieve the full set of keys and values in the Fields. Like the\n    /// constructor, the list represents each key-value pair.\n    ///\n    /// The outer list represents each key-value pair in the Fields. Keys\n    /// which have multiple values are represented by multiple entries in this\n    /// list with the same key.\n    entries: func() -> list<tuple<field-key,field-value>>;\n\n    /// Make a deep copy of the Fields. Equivelant in behavior to calling the\n    /// `fields` constructor on the return value of `entries`. The resulting\n    /// `fields` is mutable.\n    clone: func() -> fields;\n  }\n\n  /// Headers is an alias for Fields.\n  type headers = fields;\n\n  /// Trailers is an alias for Fields.\n  type trailers = fields;\n\n  /// Represents an incoming HTTP Request.\n  resource incoming-request {\n\n    /// Returns the method of the incoming request.\n    method: func() -> method;\n\n    /// Returns the path with query parameters from the request, as a string.\n    path-with-query: func() -> option<string>;\n\n    /// Returns the protocol scheme from the request.\n    scheme: func() -> option<scheme>;\n\n    /// Returns the authority from the request, if it was present.\n    authority: func() -> option<string>;\n\n    /// Get the `headers` associated with the request.\n    ///\n    /// The returned `headers` resource is immutable: `set`, `append`, and\n    /// `delete` operations will fail with `header-error.immutable`.\n    ///\n    /// The `headers` returned are a child resource: it must be dropped before\n    /// the parent `incoming-request` is dropped. Dropping this\n    /// `incoming-request` before all children are dropped will trap.\n    headers: func() -> headers;\n\n    /// Gives the `incoming-body` associated with this request. Will only\n    /// return success at most once, and subsequent calls will return error.\n    consume: func() -> result<incoming-body>;\n  }\n\n  /// Represents an outgoing HTTP Request.\n  resource outgoing-request {\n\n    /// Construct a new `outgoing-request` with a default `method` of `GET`, and\n    /// `none` values for `path-with-query`, `scheme`, and `authority`.\n    ///\n    /// * `headers` is the HTTP Headers for the Request.\n    ///\n    /// It is possible to construct, or manipulate with the accessor functions\n    /// below, an `outgoing-request` with an invalid combination of `scheme`\n    /// and `authority`, or `headers` which are not permitted to be sent.\n    /// It is the obligation of the `outgoing-handler.handle` implementation\n    /// to reject invalid constructions of `outgoing-request`.\n    constructor(\n      headers: headers\n    );\n\n    /// Returns the resource corresponding to the outgoing Body for this\n    /// Request.\n    ///\n    /// Returns success on the first call: the `outgoing-body` resource for\n    /// this `outgoing-request` can be retrieved at most once. Subsequent\n    /// calls will return error.\n    body: func() -> result<outgoing-body>;\n\n    /// Get the Method for the Request.\n    method: func() -> method;\n    /// Set the Method for the Request. Fails if the string present in a\n    /// `method.other` argument is not a syntactically valid method.\n    set-method: func(method: method) -> result;\n\n    /// Get the combination of the HTTP Path and Query for the Request.\n    /// When `none`, this represents an empty Path and empty Query.\n    path-with-query: func() -> option<string>;\n    /// Set the combination of the HTTP Path and Query for the Request.\n    /// When `none`, this represents an empty Path and empty Query. Fails is the\n    /// string given is not a syntactically valid path and query uri component.\n    set-path-with-query: func(path-with-query: option<string>) -> result;\n\n    /// Get the HTTP Related Scheme for the Request. When `none`, the\n    /// implementation may choose an appropriate default scheme.\n    scheme: func() -> option<scheme>;\n    /// Set the HTTP Related Scheme for the Request. When `none`, the\n    /// implementation may choose an appropriate default scheme. Fails if the\n    /// string given is not a syntactically valid uri scheme.\n    set-scheme: func(scheme: option<scheme>) -> result;\n\n    /// Get the HTTP Authority for the Request. A value of `none` may be used\n    /// with Related Schemes which do not require an Authority. The HTTP and\n    /// HTTPS schemes always require an authority.\n    authority: func() -> option<string>;\n    /// Set the HTTP Authority for the Request. A value of `none` may be used\n    /// with Related Schemes which do not require an Authority. The HTTP and\n    /// HTTPS schemes always require an authority. Fails if the string given is\n    /// not a syntactically valid uri authority.\n    set-authority: func(authority: option<string>) -> result;\n\n    /// Get the headers associated with the Request.\n    ///\n    /// The returned `headers` resource is immutable: `set`, `append`, and\n    /// `delete` operations will fail with `header-error.immutable`.\n    ///\n    /// This headers resource is a child: it must be dropped before the parent\n    /// `outgoing-request` is dropped, or its ownership is transfered to\n    /// another component by e.g. `outgoing-handler.handle`.\n    headers: func() -> headers;\n  }\n\n  /// Parameters for making an HTTP Request. Each of these parameters is\n  /// currently an optional timeout applicable to the transport layer of the\n  /// HTTP protocol.\n  ///\n  /// These timeouts are separate from any the user may use to bound a\n  /// blocking call to `wasi:io/poll.poll`.\n  resource request-options {\n    /// Construct a default `request-options` value.\n    constructor();\n\n    /// The timeout for the initial connect to the HTTP Server.\n    connect-timeout: func() -> option<duration>;\n\n    /// Set the timeout for the initial connect to the HTTP Server. An error\n    /// return value indicates that this timeout is not supported.\n    set-connect-timeout: func(duration: option<duration>) -> result;\n\n    /// The timeout for receiving the first byte of the Response body.\n    first-byte-timeout: func() -> option<duration>;\n\n    /// Set the timeout for receiving the first byte of the Response body. An\n    /// error return value indicates that this timeout is not supported.\n    set-first-byte-timeout: func(duration: option<duration>) -> result;\n\n    /// The timeout for receiving subsequent chunks of bytes in the Response\n    /// body stream.\n    between-bytes-timeout: func() -> option<duration>;\n\n    /// Set the timeout for receiving subsequent chunks of bytes in the Response\n    /// body stream. An error return value indicates that this timeout is not\n    /// supported.\n    set-between-bytes-timeout: func(duration: option<duration>) -> result;\n  }\n\n  /// Represents the ability to send an HTTP Response.\n  ///\n  /// This resource is used by the `wasi:http/incoming-handler` interface to\n  /// allow a Response to be sent corresponding to the Request provided as the\n  /// other argument to `incoming-handler.handle`.\n  resource response-outparam {\n\n    /// Set the value of the `response-outparam` to either send a response,\n    /// or indicate an error.\n    ///\n    /// This method consumes the `response-outparam` to ensure that it is\n    /// called at most once. If it is never called, the implementation\n    /// will respond with an error.\n    ///\n    /// The user may provide an `error` to `response` to allow the\n    /// implementation determine how to respond with an HTTP error response.\n    set: static func(\n      param: response-outparam,\n      response: result<outgoing-response, error-code>,\n    );\n  }\n\n  /// This type corresponds to the HTTP standard Status Code.\n  type status-code = u16;\n\n  /// Represents an incoming HTTP Response.\n  resource incoming-response {\n\n    /// Returns the status code from the incoming response.\n    status: func() -> status-code;\n\n    /// Returns the headers from the incoming response.\n    ///\n    /// The returned `headers` resource is immutable: `set`, `append`, and\n    /// `delete` operations will fail with `header-error.immutable`.\n    ///\n    /// This headers resource is a child: it must be dropped before the parent\n    /// `incoming-response` is dropped.\n    headers: func() -> headers;\n\n    /// Returns the incoming body. May be called at most once. Returns error\n    /// if called additional times.\n    consume: func() -> result<incoming-body>;\n  }\n\n  /// Represents an incoming HTTP Request or Response\'s Body.\n  ///\n  /// A body has both its contents - a stream of bytes - and a (possibly\n  /// empty) set of trailers, indicating that the full contents of the\n  /// body have been received. This resource represents the contents as\n  /// an `input-stream` and the delivery of trailers as a `future-trailers`,\n  /// and ensures that the user of this interface may only be consuming either\n  /// the body contents or waiting on trailers at any given time.\n  resource incoming-body {\n\n    /// Returns the contents of the body, as a stream of bytes.\n    ///\n    /// Returns success on first call: the stream representing the contents\n    /// can be retrieved at most once. Subsequent calls will return error.\n    ///\n    /// The returned `input-stream` resource is a child: it must be dropped\n    /// before the parent `incoming-body` is dropped, or consumed by\n    /// `incoming-body.finish`.\n    ///\n    /// This invariant ensures that the implementation can determine whether\n    /// the user is consuming the contents of the body, waiting on the\n    /// `future-trailers` to be ready, or neither. This allows for network\n    /// backpressure is to be applied when the user is consuming the body,\n    /// and for that backpressure to not inhibit delivery of the trailers if\n    /// the user does not read the entire body.\n    %stream: func() -> result<input-stream>;\n\n    /// Takes ownership of `incoming-body`, and returns a `future-trailers`.\n    /// This function will trap if the `input-stream` child is still alive.\n    finish: static func(this: incoming-body) -> future-trailers;\n  }\n\n  /// Represents a future which may eventaully return trailers, or an error.\n  ///\n  /// In the case that the incoming HTTP Request or Response did not have any\n  /// trailers, this future will resolve to the empty set of trailers once the\n  /// complete Request or Response body has been received.\n  resource future-trailers {\n\n    /// Returns a pollable which becomes ready when either the trailers have\n    /// been received, or an error has occured. When this pollable is ready,\n    /// the `get` method will return `some`.\n    subscribe: func() -> pollable;\n\n    /// Returns the contents of the trailers, or an error which occured,\n    /// once the future is ready.\n    ///\n    /// The outer `option` represents future readiness. Users can wait on this\n    /// `option` to become `some` using the `subscribe` method.\n    ///\n    /// The outer `result` is used to retrieve the trailers or error at most\n    /// once. It will be success on the first call in which the outer option\n    /// is `some`, and error on subsequent calls.\n    ///\n    /// The inner `result` represents that either the HTTP Request or Response\n    /// body, as well as any trailers, were received successfully, or that an\n    /// error occured receiving them. The optional `trailers` indicates whether\n    /// or not trailers were present in the body.\n    ///\n    /// When some `trailers` are returned by this method, the `trailers`\n    /// resource is immutable, and a child. Use of the `set`, `append`, or\n    /// `delete` methods will return an error, and the resource must be\n    /// dropped before the parent `future-trailers` is dropped.\n    get: func() -> option<result<result<option<trailers>, error-code>>>;\n  }\n\n  /// Represents an outgoing HTTP Response.\n  resource outgoing-response {\n\n    /// Construct an `outgoing-response`, with a default `status-code` of `200`.\n    /// If a different `status-code` is needed, it must be set via the\n    /// `set-status-code` method.\n    ///\n    /// * `headers` is the HTTP Headers for the Response.\n    constructor(headers: headers);\n\n    /// Get the HTTP Status Code for the Response.\n    status-code: func() -> status-code;\n\n    /// Set the HTTP Status Code for the Response. Fails if the status-code\n    /// given is not a valid http status code.\n    set-status-code: func(status-code: status-code) -> result;\n\n    /// Get the headers associated with the Request.\n    ///\n    /// The returned `headers` resource is immutable: `set`, `append`, and\n    /// `delete` operations will fail with `header-error.immutable`.\n    ///\n    /// This headers resource is a child: it must be dropped before the parent\n    /// `outgoing-request` is dropped, or its ownership is transfered to\n    /// another component by e.g. `outgoing-handler.handle`.\n    headers: func() -> headers;\n\n    /// Returns the resource corresponding to the outgoing Body for this Response.\n    ///\n    /// Returns success on the first call: the `outgoing-body` resource for\n    /// this `outgoing-response` can be retrieved at most once. Subsequent\n    /// calls will return error.\n    body: func() -> result<outgoing-body>;\n  }\n\n  /// Represents an outgoing HTTP Request or Response\'s Body.\n  ///\n  /// A body has both its contents - a stream of bytes - and a (possibly\n  /// empty) set of trailers, inducating the full contents of the body\n  /// have been sent. This resource represents the contents as an\n  /// `output-stream` child resource, and the completion of the body (with\n  /// optional trailers) with a static function that consumes the\n  /// `outgoing-body` resource, and ensures that the user of this interface\n  /// may not write to the body contents after the body has been finished.\n  ///\n  /// If the user code drops this resource, as opposed to calling the static\n  /// method `finish`, the implementation should treat the body as incomplete,\n  /// and that an error has occured. The implementation should propogate this\n  /// error to the HTTP protocol by whatever means it has available,\n  /// including: corrupting the body on the wire, aborting the associated\n  /// Request, or sending a late status code for the Response.\n  resource outgoing-body {\n\n    /// Returns a stream for writing the body contents.\n    ///\n    /// The returned `output-stream` is a child resource: it must be dropped\n    /// before the parent `outgoing-body` resource is dropped (or finished),\n    /// otherwise the `outgoing-body` drop or `finish` will trap.\n    ///\n    /// Returns success on the first call: the `output-stream` resource for\n    /// this `outgoing-body` may be retrieved at most once. Subsequent calls\n    /// will return error.\n    write: func() -> result<output-stream>;\n\n    /// Finalize an outgoing body, optionally providing trailers. This must be\n    /// called to signal that the response is complete. If the `outgoing-body`\n    /// is dropped without calling `outgoing-body.finalize`, the implementation\n    /// should treat the body as corrupted.\n    ///\n    /// Fails if the body\'s `outgoing-request` or `outgoing-response` was\n    /// constructed with a Content-Length header, and the contents written\n    /// to the body (via `write`) does not match the value given in the\n    /// Content-Length.\n    finish: static func(\n      this: outgoing-body,\n      trailers: option<trailers>\n    ) -> result<_, error-code>;\n  }\n\n  /// Represents a future which may eventaully return an incoming HTTP\n  /// Response, or an error.\n  ///\n  /// This resource is returned by the `wasi:http/outgoing-handler` interface to\n  /// provide the HTTP Response corresponding to the sent Request.\n  resource future-incoming-response {\n    /// Returns a pollable which becomes ready when either the Response has\n    /// been received, or an error has occured. When this pollable is ready,\n    /// the `get` method will return `some`.\n    subscribe: func() -> pollable;\n\n    /// Returns the incoming HTTP Response, or an error, once one is ready.\n    ///\n    /// The outer `option` represents future readiness. Users can wait on this\n    /// `option` to become `some` using the `subscribe` method.\n    ///\n    /// The outer `result` is used to retrieve the response or error at most\n    /// once. It will be success on the first call in which the outer option\n    /// is `some`, and error on subsequent calls.\n    ///\n    /// The inner `result` represents that either the incoming HTTP Response\n    /// status and headers have recieved successfully, or that an error\n    /// occured. Errors may also occur while consuming the response body,\n    /// but those will be reported by the `incoming-body` and its\n    /// `output-stream` child.\n    get: func() -> option<result<result<incoming-response, error-code>>>;\n\n  }\n}\n";
        const _: &[u8] = b"/// This interface defines a handler of incoming HTTP Requests. It should\n/// be exported by components which can respond to HTTP Requests.\ninterface incoming-handler {\n  use types.{incoming-request, response-outparam};\n\n  /// This function is invoked with an incoming HTTP Request, and a resource\n  /// `response-outparam` which provides the capability to reply with an HTTP\n  /// Response. The response is sent by calling the `response-outparam.set`\n  /// method, which allows execution to continue after the response has been\n  /// sent. This enables both streaming to the response body, and performing other\n  /// work.\n  ///\n  /// The implementor of this function must write a response to the\n  /// `response-outparam` before returning, or else the caller will respond\n  /// with an error on its behalf.\n  handle: func(\n    request: incoming-request,\n    response-out: response-outparam\n  );\n}\n\n/// This interface defines a handler of outgoing HTTP Requests. It should be\n/// imported by components which wish to make HTTP Requests.\ninterface outgoing-handler {\n  use types.{\n    outgoing-request, request-options, future-incoming-response, error-code\n  };\n\n  /// This function is invoked with an outgoing HTTP Request, and it returns\n  /// a resource `future-incoming-response` which represents an HTTP Response\n  /// which may arrive in the future.\n  ///\n  /// The `options` argument accepts optional parameters for the HTTP\n  /// protocol\'s transport layer.\n  ///\n  /// This function may return an error if the `outgoing-request` is invalid\n  /// or not allowed to be made. Otherwise, protocol errors are reported\n  /// through the `future-incoming-response`.\n  handle: func(\n    request: outgoing-request,\n    options: option<request-options>\n  ) -> result<future-incoming-response, error-code>;\n}\n";
        const _: &[u8] = b"package kiwi:kiwi@0.1.0;\n\nworld intercept-hook {\n    use intercept-types.{context, action};\n\n    export intercept: func(ctx: context) -> action;\n}\n\nworld authenticate-hook {\n    use authenticate-types.{outcome, http-request};\n\n    import wasi:http/outgoing-handler@0.2.0;\n\n    export authenticate: func(incoming: http-request) -> outcome;\n}\n\nworld internal {\n    use wasi:http/types@0.2.0.{method, scheme, field-key, field-value};\n\n    import wasi:http/outgoing-handler@0.2.0;\n}\n";
        const _: &[u8] = b"interface intercept-types {\n    // Plugin context\n    record context {\n        auth: option<list<u8>>,\n        connection: connection-ctx,\n        event: event-ctx,\n    }\n\n    variant connection-ctx {\n        websocket(websocket),\n    }\n\n    variant event-ctx {\n        kafka(kafka-event-ctx),\n        counter(counter-event-ctx),\n    }\n\n    record counter-event-ctx {\n        source-id: string,\n        count: u64,\n    }\n\n    record kafka-event-ctx {\n        payload: option<list<u8>>,\n        source-id: string,\n        topic: string,\n        timestamp: option<u64>,\n        partition: u32,\n        offset: u64,\n    }\n\n    record websocket {\n        addr: option<string>,\n    }\n\n    variant transformed-payload {\n        kafka(option<list<u8>>),\n        counter(u64),\n    }\n\n    variant action {\n        forward,\n        discard,\n        transform(transformed-payload),\n    }\n}\n";
        const _: &[u8] = b"interface authenticate-types {\n    use wasi:http/types@0.2.0.{method, scheme, field-key, field-value};\n\n    variant outcome {\n        authenticate,\n        reject,\n        with-context(list<u8>),\n    }\n\n    // This is the object form of the resource `wasi:http/types@0.2.0.{incoming-request}`.\n    // Curently, it\'s duplicated due to the lack of support for including re-mapped types\n    // in exported functions arguments, via `--with`. The issue is tracked \n    // [here](https://github.com/bytecodealliance/wit-bindgen/issues/832).\n    //\n    // Until the issue is resolved, we have to duplicate the type here, and massage it to be\n    // compatible with the `Request` type in the kiwi-sdk.\n    //\n    // NOTE: Resolving this workaround will likely require a new major version of the SDK to be\n    // released, as it will be a breaking change unless we can guarantee API compatibility between\n    // the two types.\n    record http-request {\n        /// Returns the method of the incoming request.\n        method: method,\n\n        /// Returns the path with query parameters from the request, as a string.\n        path-with-query: option<string>,\n\n        /// Returns the protocol scheme from the request.\n        scheme: option<scheme>,\n\n        /// Returns the authority from the request, if it was present.\n        authority: option<string>,\n\n        /// Get the `headers` associated with the request.\n        headers: list<tuple<field-key, field-value>>,\n    }\n}\n";
    }
    struct Kiwi;
    impl bindings::Guest for Kiwi {
        fn authenticate(
            incoming: self::bindings::kiwi::kiwi::authenticate_types::HttpRequest,
        ) -> self::bindings::kiwi::kiwi::authenticate_types::Outcome {
            super::handle(incoming.into()).into()
        }
    }
    impl From<::kiwi_sdk::hook::authenticate::Outcome>
    for self::bindings::kiwi::kiwi::authenticate_types::Outcome {
        fn from(value: ::kiwi_sdk::hook::authenticate::Outcome) -> Self {
            match value {
                ::kiwi_sdk::hook::authenticate::Outcome::Authenticate => {
                    Self::Authenticate
                }
                ::kiwi_sdk::hook::authenticate::Outcome::Reject => Self::Reject,
                ::kiwi_sdk::hook::authenticate::Outcome::WithContext(payload) => {
                    Self::WithContext(payload)
                }
            }
        }
    }
    impl From<self::bindings::kiwi::kiwi::authenticate_types::HttpRequest>
    for ::kiwi_sdk::http::Request<()> {
        fn from(
            value: self::bindings::kiwi::kiwi::authenticate_types::HttpRequest,
        ) -> Self {
            let mut uri_builder = ::kiwi_sdk::http::Uri::builder();
            if let Some(scheme) = value.scheme {
                let scheme = match scheme {
                    ::kiwi_sdk::wit::wasi::http::types::Scheme::Http => {
                        ::kiwi_sdk::http::Scheme::HTTP
                    }
                    ::kiwi_sdk::wit::wasi::http::types::Scheme::Https => {
                        ::kiwi_sdk::http::Scheme::HTTPS
                    }
                    ::kiwi_sdk::wit::wasi::http::types::Scheme::Other(scheme) => {
                        scheme.as_str().parse().expect("failed to parse scheme")
                    }
                };
                uri_builder = uri_builder.scheme(scheme);
            }
            if let Some(authority) = value.authority {
                uri_builder = uri_builder.authority(authority.as_str());
            }
            if let Some(path_with_query) = value.path_with_query {
                uri_builder = uri_builder.path_and_query(path_with_query.as_str());
            }
            let uri = uri_builder.build().expect("failed to build uri");
            let method = match value.method {
                ::kiwi_sdk::wit::wasi::http::types::Method::Get => {
                    ::kiwi_sdk::http::Method::GET
                }
                ::kiwi_sdk::wit::wasi::http::types::Method::Head => {
                    ::kiwi_sdk::http::Method::HEAD
                }
                ::kiwi_sdk::wit::wasi::http::types::Method::Post => {
                    ::kiwi_sdk::http::Method::POST
                }
                ::kiwi_sdk::wit::wasi::http::types::Method::Put => {
                    ::kiwi_sdk::http::Method::PUT
                }
                ::kiwi_sdk::wit::wasi::http::types::Method::Delete => {
                    ::kiwi_sdk::http::Method::DELETE
                }
                ::kiwi_sdk::wit::wasi::http::types::Method::Connect => {
                    ::kiwi_sdk::http::Method::CONNECT
                }
                ::kiwi_sdk::wit::wasi::http::types::Method::Options => {
                    ::kiwi_sdk::http::Method::OPTIONS
                }
                ::kiwi_sdk::wit::wasi::http::types::Method::Trace => {
                    ::kiwi_sdk::http::Method::TRACE
                }
                ::kiwi_sdk::wit::wasi::http::types::Method::Patch => {
                    ::kiwi_sdk::http::Method::PATCH
                }
                ::kiwi_sdk::wit::wasi::http::types::Method::Other(_) => {
                    ::core::panicking::panic_fmt(format_args!("Unknown method"));
                }
            };
            let mut request_builder = ::kiwi_sdk::http::Request::builder()
                .method(method)
                .uri(uri);
            for (key, value) in value.headers {
                request_builder = request_builder.header(key, value);
            }
            request_builder.body(()).expect("failed to build request")
        }
    }
    const _: () = {
        #[export_name = "authenticate"]
        unsafe extern "C" fn export_authenticate(
            arg0: i32,
            arg1: *mut u8,
            arg2: usize,
            arg3: i32,
            arg4: *mut u8,
            arg5: usize,
            arg6: i32,
            arg7: i32,
            arg8: *mut u8,
            arg9: usize,
            arg10: i32,
            arg11: *mut u8,
            arg12: usize,
            arg13: *mut u8,
            arg14: usize,
        ) -> *mut u8 {
            bindings::_export_authenticate_cabi::<
                Kiwi,
            >(
                arg0,
                arg1,
                arg2,
                arg3,
                arg4,
                arg5,
                arg6,
                arg7,
                arg8,
                arg9,
                arg10,
                arg11,
                arg12,
                arg13,
                arg14,
            )
        }
        #[export_name = "cabi_post_authenticate"]
        unsafe extern "C" fn _post_return_authenticate(arg0: *mut u8) {
            bindings::__post_return_authenticate::<Kiwi>(arg0)
        }
    };
}
